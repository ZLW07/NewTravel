/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.cyberbotics.webots.controller;

public class Display extends Device {
  private transient long swigCPtr;

  protected Display(long cPtr, boolean cMemoryOwn) {
    super(wrapperJNI.Display_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Display obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        wrapperJNI.delete_Display(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

   public void drawPolygon(int[] x, int[] y) {
     drawPolygon(x,y,Math.min(x.length,y.length));
   }
   public void fillPolygon(int[] x, int[] y) {
     fillPolygon(x,y,Math.min(x.length,y.length));
   }

  public Display(String name) {
    this(wrapperJNI.new_Display(name), true);
  }

  public int getWidth() {
    return wrapperJNI.Display_getWidth(swigCPtr, this);
  }

  public int getHeight() {
    return wrapperJNI.Display_getHeight(swigCPtr, this);
  }

  public void setColor(int color) {
    wrapperJNI.Display_setColor(swigCPtr, this, color);
  }

  public void setAlpha(double alpha) {
    wrapperJNI.Display_setAlpha(swigCPtr, this, alpha);
  }

  public void setOpacity(double opacity) {
    wrapperJNI.Display_setOpacity(swigCPtr, this, opacity);
  }

  public void setFont(String font, int size, boolean antiAliasing) {
    wrapperJNI.Display_setFont(swigCPtr, this, font, size, antiAliasing);
  }

  public void attachCamera(Camera camera) {
    wrapperJNI.Display_attachCamera(swigCPtr, this, Camera.getCPtr(camera), camera);
  }

  public void detachCamera() {
    wrapperJNI.Display_detachCamera(swigCPtr, this);
  }

  public void drawPixel(int x1, int y1) {
    wrapperJNI.Display_drawPixel(swigCPtr, this, x1, y1);
  }

  public void drawLine(int x1, int y1, int x2, int y2) {
    wrapperJNI.Display_drawLine(swigCPtr, this, x1, y1, x2, y2);
  }

  public void drawRectangle(int x, int y, int width, int height) {
    wrapperJNI.Display_drawRectangle(swigCPtr, this, x, y, width, height);
  }

  public void drawOval(int cx, int cy, int a, int b) {
    wrapperJNI.Display_drawOval(swigCPtr, this, cx, cy, a, b);
  }

  public void drawPolygon(int[] x, int[] y, int size) {
    wrapperJNI.Display_drawPolygon(swigCPtr, this, x, y, size);
  }

  public void drawText(String txt, int x, int y) {
    wrapperJNI.Display_drawText(swigCPtr, this, txt, x, y);
  }

  public void fillRectangle(int x, int y, int width, int height) {
    wrapperJNI.Display_fillRectangle(swigCPtr, this, x, y, width, height);
  }

  public void fillOval(int cx, int cy, int a, int b) {
    wrapperJNI.Display_fillOval(swigCPtr, this, cx, cy, a, b);
  }

  public void fillPolygon(int[] x, int[] y, int size) {
    wrapperJNI.Display_fillPolygon(swigCPtr, this, x, y, size);
  }

  public ImageRef imageNew(int width, int height, int[] data, int format) {
    long cPtr = wrapperJNI.Display_imageNew(swigCPtr, this, width, height, data, format);
    return (cPtr == 0) ? null : new ImageRef(cPtr, false);
  }

  public ImageRef imageCopy(int x, int y, int width, int height) {
    long cPtr = wrapperJNI.Display_imageCopy(swigCPtr, this, x, y, width, height);
    return (cPtr == 0) ? null : new ImageRef(cPtr, false);
  }

  public void imagePaste(ImageRef ir, int x, int y, boolean blend) {
    wrapperJNI.Display_imagePaste__SWIG_0(swigCPtr, this, ImageRef.getCPtr(ir), ir, x, y, blend);
  }

  public void imagePaste(ImageRef ir, int x, int y) {
    wrapperJNI.Display_imagePaste__SWIG_1(swigCPtr, this, ImageRef.getCPtr(ir), ir, x, y);
  }

  public ImageRef imageLoad(String filename) {
    long cPtr = wrapperJNI.Display_imageLoad(swigCPtr, this, filename);
    return (cPtr == 0) ? null : new ImageRef(cPtr, false);
  }

  public void imageSave(ImageRef ir, String filename) {
    wrapperJNI.Display_imageSave(swigCPtr, this, ImageRef.getCPtr(ir), ir, filename);
  }

  public void imageDelete(ImageRef ir) {
    wrapperJNI.Display_imageDelete(swigCPtr, this, ImageRef.getCPtr(ir), ir);
  }

  public final static int RGB = 3;
  public final static int RGBA = RGB + 1;
  public final static int ARGB = RGBA + 1;
  public final static int BGRA = ARGB + 1;
  public final static int ABGR = BGRA + 1;

}
