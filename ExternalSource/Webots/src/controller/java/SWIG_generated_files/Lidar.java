/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.cyberbotics.webots.controller;

public class Lidar extends Device {
  private transient long swigCPtr;

  protected Lidar(long cPtr, boolean cMemoryOwn) {
    super(wrapperJNI.Lidar_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Lidar obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        wrapperJNI.delete_Lidar(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public LidarPoint[] getPointCloud() {
    int numberOfPoints = wrapperJNI.Lidar_getNumberOfPoints(swigCPtr, this);
    LidarPoint ret[] = new LidarPoint[numberOfPoints];
    for (int i = 0; i < numberOfPoints; ++i)
      ret[i] = this.getPoint(i);
    return ret;
  }

  public LidarPoint[] getLayerPointCloud(int layer) {
    int numberOfPoints = wrapperJNI.Lidar_getHorizontalResolution(swigCPtr, this);
    LidarPoint ret[] = new LidarPoint[numberOfPoints];
    for (int i = 0; i < numberOfPoints; ++i)
      ret[i] = this.getLayerPoint(layer, i);
    return ret;
  }

  public Lidar(String name) {
    this(wrapperJNI.new_Lidar(name), true);
  }

  public void enable(int samplingPeriod) {
    wrapperJNI.Lidar_enable(swigCPtr, this, samplingPeriod);
  }

  public void enablePointCloud() {
    wrapperJNI.Lidar_enablePointCloud(swigCPtr, this);
  }

  public void disable() {
    wrapperJNI.Lidar_disable(swigCPtr, this);
  }

  public void disablePointCloud() {
    wrapperJNI.Lidar_disablePointCloud(swigCPtr, this);
  }

  public int getSamplingPeriod() {
    return wrapperJNI.Lidar_getSamplingPeriod(swigCPtr, this);
  }

  public boolean isPointCloudEnabled() {
    return wrapperJNI.Lidar_isPointCloudEnabled(swigCPtr, this);
  }

  public float[] getRangeImage() {
    return wrapperJNI.Lidar_getRangeImage(swigCPtr, this);
  }

  public float[] getLayerRangeImage(int layer) {
    return wrapperJNI.Lidar_getLayerRangeImage(swigCPtr, this, layer);
  }

  private LidarPoint getPointCloudPrivate() {
    long cPtr = wrapperJNI.Lidar_getPointCloudPrivate(swigCPtr, this);
    return (cPtr == 0) ? null : new LidarPoint(cPtr, false);
  }

  private LidarPoint getLayerPointCloudPrivate(int layer) {
    long cPtr = wrapperJNI.Lidar_getLayerPointCloudPrivate(swigCPtr, this, layer);
    return (cPtr == 0) ? null : new LidarPoint(cPtr, false);
  }

  public int getNumberOfPoints() {
    return wrapperJNI.Lidar_getNumberOfPoints(swigCPtr, this);
  }

  public int getHorizontalResolution() {
    return wrapperJNI.Lidar_getHorizontalResolution(swigCPtr, this);
  }

  public int getNumberOfLayers() {
    return wrapperJNI.Lidar_getNumberOfLayers(swigCPtr, this);
  }

  public double getMinFrequency() {
    return wrapperJNI.Lidar_getMinFrequency(swigCPtr, this);
  }

  public double getMaxFrequency() {
    return wrapperJNI.Lidar_getMaxFrequency(swigCPtr, this);
  }

  public double getFrequency() {
    return wrapperJNI.Lidar_getFrequency(swigCPtr, this);
  }

  public void setFrequency(double frequency) {
    wrapperJNI.Lidar_setFrequency(swigCPtr, this, frequency);
  }

  public double getFov() {
    return wrapperJNI.Lidar_getFov(swigCPtr, this);
  }

  public double getVerticalFov() {
    return wrapperJNI.Lidar_getVerticalFov(swigCPtr, this);
  }

  public double getMinRange() {
    return wrapperJNI.Lidar_getMinRange(swigCPtr, this);
  }

  public double getMaxRange() {
    return wrapperJNI.Lidar_getMaxRange(swigCPtr, this);
  }

  private LidarPoint getPoint(int index) {
    return new LidarPoint(wrapperJNI.Lidar_getPoint(swigCPtr, this, index), true);
  }

  private LidarPoint getLayerPoint(int layer, int index) {
    return new LidarPoint(wrapperJNI.Lidar_getLayerPoint(swigCPtr, this, layer, index), true);
  }

}
