/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.cyberbotics.webots.controller;

public class Field {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Field(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Field obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
  }

  public Node getSFNode() {
    long cPtr = wrapperJNI.Field_getSFNodePrivate(swigCPtr, this);
    return Node.findNode(cPtr);
  }

  public Node getMFNode(int index) {
    long cPtr = wrapperJNI.Field_getMFNodePrivate(swigCPtr, this, index);
    return Node.findNode(cPtr);
  }

  private static java.util.HashMap<Long,Field> fields = new java.util.HashMap<Long,Field>();

  // DO NOT USE THIS FUNCTION: IT IS RESERVED FOR INTERNAL USE !
  public static Field findField(long cPtr) {
    if (cPtr == 0)
      return null;

    Field field = fields.get(new Long(cPtr));
    if (field != null)
      return field;

    field = new Field(cPtr, false);
    fields.put(new Long(cPtr), field);
    return field;
  }

  public String getName() {
    return wrapperJNI.Field_getName(swigCPtr, this);
  }

  public int getType() {
    return wrapperJNI.Field_getType(swigCPtr, this);
  }

  public String getTypeName() {
    return wrapperJNI.Field_getTypeName(swigCPtr, this);
  }

  public int getCount() {
    return wrapperJNI.Field_getCount(swigCPtr, this);
  }

  public void enableSFTracking(int samplingPeriod) {
    wrapperJNI.Field_enableSFTracking(swigCPtr, this, samplingPeriod);
  }

  public void disableSFTracking() {
    wrapperJNI.Field_disableSFTracking(swigCPtr, this);
  }

  public boolean getSFBool() {
    return wrapperJNI.Field_getSFBool(swigCPtr, this);
  }

  public int getSFInt32() {
    return wrapperJNI.Field_getSFInt32(swigCPtr, this);
  }

  public double getSFFloat() {
    return wrapperJNI.Field_getSFFloat(swigCPtr, this);
  }

  public double[] getSFVec2f() {
    return wrapperJNI.Field_getSFVec2f(swigCPtr, this);
  }

  public double[] getSFVec3f() {
    return wrapperJNI.Field_getSFVec3f(swigCPtr, this);
  }

  public double[] getSFRotation() {
    return wrapperJNI.Field_getSFRotation(swigCPtr, this);
  }

  public double[] getSFColor() {
    return wrapperJNI.Field_getSFColor(swigCPtr, this);
  }

  public String getSFString() {
    return wrapperJNI.Field_getSFString(swigCPtr, this);
  }

  private Node getSFNodePrivate() {
    long cPtr = wrapperJNI.Field_getSFNodePrivate(swigCPtr, this);
    return (cPtr == 0) ? null : new Node(cPtr, false);
  }

  public boolean getMFBool(int index) {
    return wrapperJNI.Field_getMFBool(swigCPtr, this, index);
  }

  public int getMFInt32(int index) {
    return wrapperJNI.Field_getMFInt32(swigCPtr, this, index);
  }

  public double getMFFloat(int index) {
    return wrapperJNI.Field_getMFFloat(swigCPtr, this, index);
  }

  public double[] getMFVec2f(int index) {
    return wrapperJNI.Field_getMFVec2f(swigCPtr, this, index);
  }

  public double[] getMFVec3f(int index) {
    return wrapperJNI.Field_getMFVec3f(swigCPtr, this, index);
  }

  public double[] getMFRotation(int index) {
    return wrapperJNI.Field_getMFRotation(swigCPtr, this, index);
  }

  public double[] getMFColor(int index) {
    return wrapperJNI.Field_getMFColor(swigCPtr, this, index);
  }

  public String getMFString(int index) {
    return wrapperJNI.Field_getMFString(swigCPtr, this, index);
  }

  private Node getMFNodePrivate(int index) {
    long cPtr = wrapperJNI.Field_getMFNodePrivate(swigCPtr, this, index);
    return (cPtr == 0) ? null : new Node(cPtr, false);
  }

  public void setSFBool(boolean value) {
    wrapperJNI.Field_setSFBool(swigCPtr, this, value);
  }

  public void setSFInt32(int value) {
    wrapperJNI.Field_setSFInt32(swigCPtr, this, value);
  }

  public void setSFFloat(double value) {
    wrapperJNI.Field_setSFFloat(swigCPtr, this, value);
  }

  public void setSFVec2f(double[] values) {
    wrapperJNI.Field_setSFVec2f(swigCPtr, this, values);
  }

  public void setSFVec3f(double[] values) {
    wrapperJNI.Field_setSFVec3f(swigCPtr, this, values);
  }

  public void setSFRotation(double[] values) {
    wrapperJNI.Field_setSFRotation(swigCPtr, this, values);
  }

  public void setSFColor(double[] values) {
    wrapperJNI.Field_setSFColor(swigCPtr, this, values);
  }

  public void setSFString(String value) {
    wrapperJNI.Field_setSFString(swigCPtr, this, value);
  }

  public void setMFBool(int index, boolean value) {
    wrapperJNI.Field_setMFBool(swigCPtr, this, index, value);
  }

  public void setMFInt32(int index, int value) {
    wrapperJNI.Field_setMFInt32(swigCPtr, this, index, value);
  }

  public void setMFFloat(int index, double value) {
    wrapperJNI.Field_setMFFloat(swigCPtr, this, index, value);
  }

  public void setMFVec2f(int index, double[] values) {
    wrapperJNI.Field_setMFVec2f(swigCPtr, this, index, values);
  }

  public void setMFVec3f(int index, double[] values) {
    wrapperJNI.Field_setMFVec3f(swigCPtr, this, index, values);
  }

  public void setMFRotation(int index, double[] values) {
    wrapperJNI.Field_setMFRotation(swigCPtr, this, index, values);
  }

  public void setMFColor(int index, double[] values) {
    wrapperJNI.Field_setMFColor(swigCPtr, this, index, values);
  }

  public void setMFString(int index, String value) {
    wrapperJNI.Field_setMFString(swigCPtr, this, index, value);
  }

  public void insertMFBool(int index, boolean value) {
    wrapperJNI.Field_insertMFBool(swigCPtr, this, index, value);
  }

  public void insertMFInt32(int index, int value) {
    wrapperJNI.Field_insertMFInt32(swigCPtr, this, index, value);
  }

  public void insertMFFloat(int index, double value) {
    wrapperJNI.Field_insertMFFloat(swigCPtr, this, index, value);
  }

  public void insertMFVec2f(int index, double[] values) {
    wrapperJNI.Field_insertMFVec2f(swigCPtr, this, index, values);
  }

  public void insertMFVec3f(int index, double[] values) {
    wrapperJNI.Field_insertMFVec3f(swigCPtr, this, index, values);
  }

  public void insertMFRotation(int index, double[] values) {
    wrapperJNI.Field_insertMFRotation(swigCPtr, this, index, values);
  }

  public void insertMFColor(int index, double[] values) {
    wrapperJNI.Field_insertMFColor(swigCPtr, this, index, values);
  }

  public void insertMFString(int index, String value) {
    wrapperJNI.Field_insertMFString(swigCPtr, this, index, value);
  }

  public void removeMF(int index) {
    wrapperJNI.Field_removeMF(swigCPtr, this, index);
  }

  public void removeSF() {
    wrapperJNI.Field_removeSF(swigCPtr, this);
  }

  public void importMFNode(int position, String filename) {
    wrapperJNI.Field_importMFNode(swigCPtr, this, position, filename);
  }

  public void importMFNodeFromString(int position, String nodeString) {
    wrapperJNI.Field_importMFNodeFromString(swigCPtr, this, position, nodeString);
  }

  public void importSFNode(String filename) {
    wrapperJNI.Field_importSFNode(swigCPtr, this, filename);
  }

  public void importSFNodeFromString(String nodeString) {
    wrapperJNI.Field_importSFNodeFromString(swigCPtr, this, nodeString);
  }

  public void removeMFNode(int position) {
    wrapperJNI.Field_removeMFNode(swigCPtr, this, position);
  }

  // Type 
  public final static int NO_FIELD = 0x00;
  public final static int SF_BOOL = 0x01;
  public final static int SF_INT32 = SF_BOOL + 1;
  public final static int SF_FLOAT = SF_INT32 + 1;
  public final static int SF_VEC2F = SF_FLOAT + 1;
  public final static int SF_VEC3F = SF_VEC2F + 1;
  public final static int SF_ROTATION = SF_VEC3F + 1;
  public final static int SF_COLOR = SF_ROTATION + 1;
  public final static int SF_STRING = SF_COLOR + 1;
  public final static int SF_NODE = SF_STRING + 1;
  public final static int MF = 0x10;
  public final static int MF_BOOL = MF + 1;
  public final static int MF_INT32 = MF_BOOL + 1;
  public final static int MF_FLOAT = MF_INT32 + 1;
  public final static int MF_VEC2F = MF_FLOAT + 1;
  public final static int MF_VEC3F = MF_VEC2F + 1;
  public final static int MF_ROTATION = MF_VEC3F + 1;
  public final static int MF_COLOR = MF_ROTATION + 1;
  public final static int MF_STRING = MF_COLOR + 1;
  public final static int MF_NODE = MF_STRING + 1;

}
