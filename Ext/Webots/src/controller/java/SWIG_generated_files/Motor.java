/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.cyberbotics.webots.controller;

public class Motor extends Device {
  private transient long swigCPtr;

  protected Motor(long cPtr, boolean cMemoryOwn) {
    super(wrapperJNI.Motor_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Motor obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        wrapperJNI.delete_Motor(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  private Brake brake;
  private PositionSensor positionSensor;

  public Brake getBrake() {
    if (brake == null)
      brake = (Brake)Robot.getDevice(getBrakeTag());
    return brake;
  }
  public PositionSensor getPositionSensor() {
    if (positionSensor == null)
      positionSensor = (PositionSensor)Robot.getDevice(getPositionSensorTag());
    return positionSensor;
  }

  public Motor(String name) {
    this(wrapperJNI.new_Motor(name), true);
  }

  public void setPosition(double position) {
    wrapperJNI.Motor_setPosition(swigCPtr, this, position);
  }

  public void setVelocity(double vel) {
    wrapperJNI.Motor_setVelocity(swigCPtr, this, vel);
  }

  public void setAcceleration(double acceleration) {
    wrapperJNI.Motor_setAcceleration(swigCPtr, this, acceleration);
  }

  public void setAvailableForce(double availableForce) {
    wrapperJNI.Motor_setAvailableForce(swigCPtr, this, availableForce);
  }

  public void setAvailableTorque(double availableTorque) {
    wrapperJNI.Motor_setAvailableTorque(swigCPtr, this, availableTorque);
  }

  public void setControlPID(double p, double i, double d) {
    wrapperJNI.Motor_setControlPID(swigCPtr, this, p, i, d);
  }

  public double getTargetPosition() {
    return wrapperJNI.Motor_getTargetPosition(swigCPtr, this);
  }

  public double getMinPosition() {
    return wrapperJNI.Motor_getMinPosition(swigCPtr, this);
  }

  public double getMaxPosition() {
    return wrapperJNI.Motor_getMaxPosition(swigCPtr, this);
  }

  public double getVelocity() {
    return wrapperJNI.Motor_getVelocity(swigCPtr, this);
  }

  public double getMaxVelocity() {
    return wrapperJNI.Motor_getMaxVelocity(swigCPtr, this);
  }

  public double getAcceleration() {
    return wrapperJNI.Motor_getAcceleration(swigCPtr, this);
  }

  public double getAvailableForce() {
    return wrapperJNI.Motor_getAvailableForce(swigCPtr, this);
  }

  public double getMaxForce() {
    return wrapperJNI.Motor_getMaxForce(swigCPtr, this);
  }

  public double getAvailableTorque() {
    return wrapperJNI.Motor_getAvailableTorque(swigCPtr, this);
  }

  public double getMaxTorque() {
    return wrapperJNI.Motor_getMaxTorque(swigCPtr, this);
  }

  public double getMultiplier() {
    return wrapperJNI.Motor_getMultiplier(swigCPtr, this);
  }

  public void enableForceFeedback(int samplingPeriod) {
    wrapperJNI.Motor_enableForceFeedback(swigCPtr, this, samplingPeriod);
  }

  public void disableForceFeedback() {
    wrapperJNI.Motor_disableForceFeedback(swigCPtr, this);
  }

  public int getForceFeedbackSamplingPeriod() {
    return wrapperJNI.Motor_getForceFeedbackSamplingPeriod(swigCPtr, this);
  }

  public double getForceFeedback() {
    return wrapperJNI.Motor_getForceFeedback(swigCPtr, this);
  }

  public void enableTorqueFeedback(int samplingPeriod) {
    wrapperJNI.Motor_enableTorqueFeedback(swigCPtr, this, samplingPeriod);
  }

  public void disableTorqueFeedback() {
    wrapperJNI.Motor_disableTorqueFeedback(swigCPtr, this);
  }

  public int getTorqueFeedbackSamplingPeriod() {
    return wrapperJNI.Motor_getTorqueFeedbackSamplingPeriod(swigCPtr, this);
  }

  public double getTorqueFeedback() {
    return wrapperJNI.Motor_getTorqueFeedback(swigCPtr, this);
  }

  public void setForce(double force) {
    wrapperJNI.Motor_setForce(swigCPtr, this, force);
  }

  public void setTorque(double torque) {
    wrapperJNI.Motor_setTorque(swigCPtr, this, torque);
  }

  public int getType() {
    return wrapperJNI.Motor_getType(swigCPtr, this);
  }

  private Brake getBrakePrivate() {
    long cPtr = wrapperJNI.Motor_getBrakePrivate(swigCPtr, this);
    return (cPtr == 0) ? null : new Brake(cPtr, false);
  }

  private PositionSensor getPositionSensorPrivate() {
    long cPtr = wrapperJNI.Motor_getPositionSensorPrivate(swigCPtr, this);
    return (cPtr == 0) ? null : new PositionSensor(cPtr, false);
  }

  public int getBrakeTag() {
    return wrapperJNI.Motor_getBrakeTag(swigCPtr, this);
  }

  public int getPositionSensorTag() {
    return wrapperJNI.Motor_getPositionSensorTag(swigCPtr, this);
  }

  // Type 
  public final static int ROTATIONAL = 0;
  public final static int LINEAR = ROTATIONAL + 1;

}
