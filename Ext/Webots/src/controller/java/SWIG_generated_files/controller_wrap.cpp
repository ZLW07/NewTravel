/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <webots/Accelerometer.hpp>
#include <webots/Altimeter.hpp>
#include <webots/Brake.hpp>
#include <webots/Camera.hpp>
#include <webots/camera_recognition_object.h>
#include <webots/contact_point.h>
#include <webots/Connector.hpp>
#include <webots/Compass.hpp>
#include <webots/Device.hpp>
#include <webots/Display.hpp>
#include <webots/DistanceSensor.hpp>
#include <webots/Emitter.hpp>
#include <webots/Field.hpp>
#include <webots/GPS.hpp>
#include <webots/Gyro.hpp>
#include <webots/ImageRef.hpp>
#include <webots/InertialUnit.hpp>
#include <webots/Joystick.hpp>
#include <webots/Keyboard.hpp>
#include <webots/LED.hpp>
#include <webots/Lidar.hpp>
#include <webots/lidar_point.h>
#include <webots/LightSensor.hpp>
#include <webots/Motor.hpp>
#include <webots/Mouse.hpp>
#include <webots/Node.hpp>
#include <webots/Pen.hpp>
#include <webots/PositionSensor.hpp>
#include <webots/radar_target.h>
#include <webots/Radar.hpp>
#include <webots/RangeFinder.hpp>
#include <webots/Receiver.hpp>
#include <webots/Robot.hpp>
#include <webots/Skin.hpp>
#include <webots/Speaker.hpp>
#include <webots/Supervisor.hpp>
#include <webots/TouchSensor.hpp>
#include <webots/utils/Motion.hpp>

using namespace std;


#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
static int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

static void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

static jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
static int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

static jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
static int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
static int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

static jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
static int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
static int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
static int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
static int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

static jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
static int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
static int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

static jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
static int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

static jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
static int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

static void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

static jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif


#include <string>


namespace webots {
  class AnsiCodes {
  };
}

SWIGINTERN int const *WbCameraRecognitionObject_getPositionOnImage(WbCameraRecognitionObject const *self){
    return self->position_on_image;
  }
SWIGINTERN int const *WbCameraRecognitionObject_getSizeOnImage(WbCameraRecognitionObject const *self){
    return self->size_on_image;
  }
SWIGINTERN int WbCameraRecognitionObject_getNumberOfColors(WbCameraRecognitionObject const *self){
    return self->number_of_colors;
  }
SWIGINTERN webots::CameraRecognitionObject webots_Camera_getRecognitionObject(webots::Camera const *self,int index){
    const webots::CameraRecognitionObject *objects = self->getRecognitionObjects();
    return objects[index];
  }
SWIGINTERN double WbLidarPoint_getLayerId(WbLidarPoint *self){
    return self->layer_id;
  }
SWIGINTERN webots::LidarPoint webots_Lidar_getPoint(webots::Lidar const *self,int index){
    const webots::LidarPoint *point = self->getPointCloud();
    return point[index];
  }
SWIGINTERN webots::LidarPoint webots_Lidar_getLayerPoint(webots::Lidar const *self,int layer,int index){
    const webots::LidarPoint *point = self->getLayerPointCloud(layer);
    return point[index];
  }
SWIGINTERN int WbContactPoint_getNodeId(WbContactPoint const *self){
    return self->node_id;
  }
SWIGINTERN webots::ContactPoint webots_Node_getContactPointFromPointer(webots::Node const *self,long long points,int index){
    return *((webots::ContactPoint *)(points + index));
  }
SWIGINTERN double WbRadarTarget_getReceivedPower(WbRadarTarget *self){
    return self->received_power;
  }
SWIGINTERN webots::RadarTarget webots_Radar_getTarget(webots::Radar const *self,int index){
    const webots::RadarTarget *targets = self->getTargets();
    return targets[index];
  }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1AnsiCodes(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  webots::AnsiCodes *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (webots::AnsiCodes *)new webots::AnsiCodes();
  *(webots::AnsiCodes **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1AnsiCodes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::AnsiCodes *arg1 = (webots::AnsiCodes *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::AnsiCodes **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Device(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Device *arg1 = (webots::Device *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Device **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Device_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Device *arg1 = (webots::Device *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Device **)&jarg1; 
  result = (std::string *) &((webots::Device const *)arg1)->getName();
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Device_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Device *arg1 = (webots::Device *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Device **)&jarg1; 
  result = ((webots::Device const *)arg1)->getModel();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Device_1getNodeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Device *arg1 = (webots::Device *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Device **)&jarg1; 
  result = (int)((webots::Device const *)arg1)->getNodeType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Device_1getTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Device *arg1 = (webots::Device *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Device **)&jarg1; 
  result = (int)((webots::Device const *)arg1)->getTag();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Device_1hasType(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  int arg1 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)webots::Device::hasType(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Accelerometer(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Accelerometer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Accelerometer *)new webots::Accelerometer((std::string const &)*arg1);
  *(webots::Accelerometer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Accelerometer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Accelerometer *arg1 = (webots::Accelerometer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Accelerometer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Accelerometer_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Accelerometer *arg1 = (webots::Accelerometer *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Accelerometer **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Accelerometer_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Accelerometer *arg1 = (webots::Accelerometer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Accelerometer **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Accelerometer_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Accelerometer *arg1 = (webots::Accelerometer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Accelerometer **)&jarg1; 
  result = (int)((webots::Accelerometer const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Accelerometer_1getValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Accelerometer *arg1 = (webots::Accelerometer *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Accelerometer **)&jarg1; 
  result = (double *)((webots::Accelerometer const *)arg1)->getValues();
  {
    const string test("getValues");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Accelerometer_1getLookupTableSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Accelerometer *arg1 = (webots::Accelerometer *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Accelerometer **)&jarg1; 
  result = (int)((webots::Accelerometer const *)arg1)->getLookupTableSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Accelerometer_1getLookupTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Accelerometer *arg1 = (webots::Accelerometer *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Accelerometer **)&jarg1; 
  result = (double *)((webots::Accelerometer const *)arg1)->getLookupTable();
  {
    jresult = SWIG_JavaArrayOutDouble(jenv, (double *) result, arg1->getLookupTableSize()*3);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Altimeter(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Altimeter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Altimeter *)new webots::Altimeter((std::string const &)*arg1);
  *(webots::Altimeter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Altimeter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Altimeter *arg1 = (webots::Altimeter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Altimeter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Altimeter_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Altimeter *arg1 = (webots::Altimeter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Altimeter **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Altimeter_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Altimeter *arg1 = (webots::Altimeter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Altimeter **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Altimeter_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Altimeter *arg1 = (webots::Altimeter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Altimeter **)&jarg1; 
  result = (int)((webots::Altimeter const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Altimeter_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Altimeter *arg1 = (webots::Altimeter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Altimeter **)&jarg1; 
  result = (double)((webots::Altimeter const *)arg1)->getValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Brake(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Brake *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Brake *)new webots::Brake((std::string const &)*arg1);
  *(webots::Brake **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Brake(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Brake *arg1 = (webots::Brake *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Brake **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Brake_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Brake *arg1 = (webots::Brake *) 0 ;
  webots::Brake::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Brake **)&jarg1; 
  result = (webots::Brake::Type)((webots::Brake const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Brake_1setDampingConstant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Brake *arg1 = (webots::Brake *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Brake **)&jarg1; 
  arg2 = (double)jarg2; 
  ((webots::Brake const *)arg1)->setDampingConstant(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Brake_1getMotorPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  webots::Brake *arg1 = (webots::Brake *) 0 ;
  webots::Motor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Brake **)&jarg1; 
  result = (webots::Motor *)(arg1)->getMotor();
  *(webots::Motor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Brake_1getPositionSensorPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  webots::Brake *arg1 = (webots::Brake *) 0 ;
  webots::PositionSensor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Brake **)&jarg1; 
  result = (webots::PositionSensor *)(arg1)->getPositionSensor();
  *(webots::PositionSensor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Brake_1getMotorTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Brake *arg1 = (webots::Brake *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Brake **)&jarg1; 
  result = (int)((webots::Brake const *)arg1)->getMotorTag();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Brake_1getPositionSensorTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Brake *arg1 = (webots::Brake *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Brake **)&jarg1; 
  result = (int)((webots::Brake const *)arg1)->getPositionSensorTag();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  result = (int) ((arg1)->id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->position;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  result = (double *)(double *) ((arg1)->position);
  jresult = SWIG_JavaArrayOutDouble(jenv, (double *)result, 3); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1orientation_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->orientation;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1orientation_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  result = (double *)(double *) ((arg1)->orientation);
  jresult = SWIG_JavaArrayOutDouble(jenv, (double *)result, 4); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->size;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  result = (double *)(double *) ((arg1)->size);
  jresult = SWIG_JavaArrayOutDouble(jenv, (double *)result, 2); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1position_1on_1image_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->position_on_image;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1position_1on_1image_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  result = (int *)(int *) ((arg1)->position_on_image);
  jresult = SWIG_JavaArrayOutInt(jenv, (int *)result, 2); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1size_1on_1image_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  int *arg2 ;
  jint *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    int *b = (int *) arg1->size_on_image;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jintArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1size_1on_1image_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  result = (int *)(int *) ((arg1)->size_on_image);
  jresult = SWIG_JavaArrayOutInt(jenv, (int *)result, 2); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1number_1of_1colors_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->number_of_colors = arg2;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1number_1of_1colors_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  result = (int) ((arg1)->number_of_colors);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1colors_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  double *arg2 = (double *) 0 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  if (arg1) (arg1)->colors = arg2;
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1colors_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  result = (double *) ((arg1)->colors);
  {
    const string test("colors");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1model_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    delete [] arg1->model;
    if (arg2) {
      arg1->model = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->model, (const char *)arg2);
    } else {
      arg1->model = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1model_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  result = (char *) ((arg1)->model);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1getPositionOnImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  result = (int *)WbCameraRecognitionObject_getPositionOnImage((WbCameraRecognitionObject const *)arg1);
  {
    jresult = SWIG_JavaArrayOutInt(jenv, result, 2);
  }
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1getSizeOnImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  result = (int *)WbCameraRecognitionObject_getSizeOnImage((WbCameraRecognitionObject const *)arg1);
  {
    jresult = SWIG_JavaArrayOutInt(jenv, result, 2);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_CameraRecognitionObject_1getNumberOfColors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  result = (int)WbCameraRecognitionObject_getNumberOfColors((WbCameraRecognitionObject const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1CameraRecognitionObject(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  WbCameraRecognitionObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (WbCameraRecognitionObject *)new WbCameraRecognitionObject();
  *(WbCameraRecognitionObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1CameraRecognitionObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WbCameraRecognitionObject *arg1 = (WbCameraRecognitionObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WbCameraRecognitionObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Camera(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Camera *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Camera *)new webots::Camera((std::string const &)*arg1);
  *(webots::Camera **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Camera(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Camera **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (int)((webots::Camera const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (unsigned char *)((webots::Camera const *)arg1)->getImage();
  {
    jresult = SWIG_JavaArrayOutInt(jenv, (int *) result, arg1->getWidth()*arg1->getHeight());
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (int)((webots::Camera const *)arg1)->getWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (int)((webots::Camera const *)arg1)->getHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getFov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (double)((webots::Camera const *)arg1)->getFov();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getMaxFov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (double)((webots::Camera const *)arg1)->getMaxFov();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getMinFov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (double)((webots::Camera const *)arg1)->getMinFov();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1setFov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setFov(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getExposure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (double)((webots::Camera const *)arg1)->getExposure();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1setExposure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setExposure(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getFocalLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (double)((webots::Camera const *)arg1)->getFocalLength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getFocalDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (double)((webots::Camera const *)arg1)->getFocalDistance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getMaxFocalDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (double)((webots::Camera const *)arg1)->getMaxFocalDistance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getMinFocalDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (double)((webots::Camera const *)arg1)->getMinFocalDistance();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1setFocalDistance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setFocalDistance(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getNear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (double)((webots::Camera const *)arg1)->getNear();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1saveImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((webots::Camera const *)arg1)->saveImage((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1hasRecognition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (bool)((webots::Camera const *)arg1)->hasRecognition();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1recognitionEnable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->recognitionEnable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1recognitionDisable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  (arg1)->recognitionDisable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getRecognitionSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (int)((webots::Camera const *)arg1)->getRecognitionSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getRecognitionNumberOfObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (int)((webots::Camera const *)arg1)->getRecognitionNumberOfObjects();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getRecognitionObjectsPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  webots::CameraRecognitionObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (webots::CameraRecognitionObject *)((webots::Camera const *)arg1)->getRecognitionObjects();
  *(webots::CameraRecognitionObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1hasRecognitionSegmentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (bool)((webots::Camera const *)arg1)->hasRecognitionSegmentation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1enableRecognitionSegmentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  (arg1)->enableRecognitionSegmentation();
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1disableRecognitionSegmentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  (arg1)->disableRecognitionSegmentation();
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1isRecognitionSegmentationEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (bool)((webots::Camera const *)arg1)->isRecognitionSegmentationEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jintArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getRecognitionSegmentationImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jintArray jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  result = (unsigned char *)((webots::Camera const *)arg1)->getRecognitionSegmentationImage();
  {
    jresult = SWIG_JavaArrayOutInt(jenv, (int *) result, arg1->getWidth()*arg1->getHeight());
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1saveRecognitionSegmentationImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((webots::Camera const *)arg1)->saveRecognitionSegmentationImage((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1getRecognitionObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  webots::Camera *arg1 = (webots::Camera *) 0 ;
  int arg2 ;
  webots::CameraRecognitionObject result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Camera **)&jarg1; 
  arg2 = (int)jarg2; 
  result = webots_Camera_getRecognitionObject((webots::Camera const *)arg1,arg2);
  *(webots::CameraRecognitionObject **)&jresult = new webots::CameraRecognitionObject((const webots::CameraRecognitionObject &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Compass(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Compass *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Compass *)new webots::Compass((std::string const &)*arg1);
  *(webots::Compass **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Compass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Compass *arg1 = (webots::Compass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Compass **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Compass_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Compass *arg1 = (webots::Compass *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Compass **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Compass_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Compass *arg1 = (webots::Compass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Compass **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Compass_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Compass *arg1 = (webots::Compass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Compass **)&jarg1; 
  result = (int)((webots::Compass const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Compass_1getValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Compass *arg1 = (webots::Compass *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Compass **)&jarg1; 
  result = (double *)((webots::Compass const *)arg1)->getValues();
  {
    const string test("getValues");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Compass_1getLookupTableSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Compass *arg1 = (webots::Compass *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Compass **)&jarg1; 
  result = (int)((webots::Compass const *)arg1)->getLookupTableSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Compass_1getLookupTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Compass *arg1 = (webots::Compass *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Compass **)&jarg1; 
  result = (double *)((webots::Compass const *)arg1)->getLookupTable();
  {
    jresult = SWIG_JavaArrayOutDouble(jenv, (double *) result, arg1->getLookupTableSize()*3);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Connector(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Connector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Connector *)new webots::Connector((std::string const &)*arg1);
  *(webots::Connector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Connector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Connector *arg1 = (webots::Connector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Connector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Connector_1enablePresence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Connector *arg1 = (webots::Connector *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Connector **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enablePresence(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Connector_1disablePresence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Connector *arg1 = (webots::Connector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Connector **)&jarg1; 
  (arg1)->disablePresence();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Connector_1getPresenceSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Connector *arg1 = (webots::Connector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Connector **)&jarg1; 
  result = (int)((webots::Connector const *)arg1)->getPresenceSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Connector_1getPresence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Connector *arg1 = (webots::Connector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Connector **)&jarg1; 
  result = (int)((webots::Connector const *)arg1)->getPresence();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Connector_1isLocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Connector *arg1 = (webots::Connector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Connector **)&jarg1; 
  result = (bool)((webots::Connector const *)arg1)->isLocked();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Connector_1lock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Connector *arg1 = (webots::Connector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Connector **)&jarg1; 
  (arg1)->lock();
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Connector_1unlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Connector *arg1 = (webots::Connector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Connector **)&jarg1; 
  (arg1)->unlock();
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1ImageRef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  WbImageRef *arg1 = 0 ;
  webots::ImageRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WbImageRef **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "WbImageRef const & reference is null");
    return 0;
  } 
  result = (webots::ImageRef *)new webots::ImageRef((WbImageRef const &)*arg1);
  *(webots::ImageRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1ImageRef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::ImageRef *arg1 = (webots::ImageRef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::ImageRef **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Display(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Display *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Display *)new webots::Display((std::string const &)*arg1);
  *(webots::Display **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Display(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Display **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Display *arg1 = (webots::Display *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  result = (int)((webots::Display const *)arg1)->getWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Display *arg1 = (webots::Display *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  result = (int)((webots::Display const *)arg1)->getHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1setColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setColor(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1setAlpha(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setAlpha(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1setOpacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setOpacity(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1setFont(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jboolean jarg4) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setFont((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1attachCamera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  webots::Camera *arg2 = (webots::Camera *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(webots::Display **)&jarg1; 
  arg2 = *(webots::Camera **)&jarg2; 
  (arg1)->attachCamera(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1detachCamera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  (arg1)->detachCamera();
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1drawPixel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->drawPixel(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1drawLine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->drawLine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1drawRectangle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->drawRectangle(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1drawOval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->drawOval(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1drawPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3, jint jarg4) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  jint *jarr2 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  arg4 = (int)jarg4; 
  (arg1)->drawPolygon((int const *)arg2,(int const *)arg3,arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1drawText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->drawText((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1fillRectangle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->fillRectangle(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1fillOval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->fillOval(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1fillPolygon(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2, jintArray jarg3, jint jarg4) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  jint *jarr2 ;
  jint *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr2, (int **)&arg2, jarg2)) return ; 
  if (!SWIG_JavaArrayInInt(jenv, &jarr3, (int **)&arg3, jarg3)) return ; 
  arg4 = (int)jarg4; 
  (arg1)->fillPolygon((int const *)arg2,(int const *)arg3,arg4);
  SWIG_JavaArrayArgoutInt(jenv, jarr2, (int *)arg2, jarg2); 
  SWIG_JavaArrayArgoutInt(jenv, jarr3, (int *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1imageNew(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jintArray jarg4, jint jarg5) {
  jlong jresult = 0 ;
  webots::Display *arg1 = (webots::Display *) 0 ;
  int arg2 ;
  int arg3 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  webots::ImageRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    if (!jarg4)
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    jsize sz = jenv->GetArrayLength(jarg4);
    jint *jarr = jenv->GetIntArrayElements(jarg4, 0);
    
    // big endian -> little endian
    unsigned int *v = (unsigned int *)jarr;
    for(int i = 0; i < sz; i++)
    v[i] = ((v[i] << 24) | ((v[i] & 0xff00) << 8) | ((v[i] >> 8) & 0xff00) | (v[i] >> 24));
    
    arg4 = (void *) jarr;
  }
  arg5 = (int)jarg5; 
  result = (webots::ImageRef *)((webots::Display const *)arg1)->imageNew(arg2,arg3,(void const *)arg4,arg5);
  *(webots::ImageRef **)&jresult = result; 
  {
    jenv->ReleaseIntArrayElements(jarg4, (jint*)arg4, 0);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1imageCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jlong jresult = 0 ;
  webots::Display *arg1 = (webots::Display *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  webots::ImageRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (webots::ImageRef *)((webots::Display const *)arg1)->imageCopy(arg2,arg3,arg4,arg5);
  *(webots::ImageRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1imagePaste_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jboolean jarg5) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  webots::ImageRef *arg2 = (webots::ImageRef *) 0 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(webots::Display **)&jarg1; 
  arg2 = *(webots::ImageRef **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->imagePaste(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1imagePaste_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  webots::ImageRef *arg2 = (webots::ImageRef *) 0 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(webots::Display **)&jarg1; 
  arg2 = *(webots::ImageRef **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->imagePaste(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1imageLoad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  webots::Display *arg1 = (webots::Display *) 0 ;
  std::string *arg2 = 0 ;
  webots::ImageRef *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Display **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (webots::ImageRef *)((webots::Display const *)arg1)->imageLoad((std::string const &)*arg2);
  *(webots::ImageRef **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1imageSave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  webots::ImageRef *arg2 = (webots::ImageRef *) 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(webots::Display **)&jarg1; 
  arg2 = *(webots::ImageRef **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  ((webots::Display const *)arg1)->imageSave(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1imageDelete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  webots::Display *arg1 = (webots::Display *) 0 ;
  webots::ImageRef *arg2 = (webots::ImageRef *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(webots::Display **)&jarg1; 
  arg2 = *(webots::ImageRef **)&jarg2; 
  ((webots::Display const *)arg1)->imageDelete(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1DistanceSensor(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::DistanceSensor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::DistanceSensor *)new webots::DistanceSensor((std::string const &)*arg1);
  *(webots::DistanceSensor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1DistanceSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::DistanceSensor *arg1 = (webots::DistanceSensor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::DistanceSensor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_DistanceSensor_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::DistanceSensor *arg1 = (webots::DistanceSensor *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::DistanceSensor **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_DistanceSensor_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::DistanceSensor *arg1 = (webots::DistanceSensor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::DistanceSensor **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_DistanceSensor_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::DistanceSensor *arg1 = (webots::DistanceSensor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::DistanceSensor **)&jarg1; 
  result = (int)((webots::DistanceSensor const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_DistanceSensor_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::DistanceSensor *arg1 = (webots::DistanceSensor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::DistanceSensor **)&jarg1; 
  result = (double)((webots::DistanceSensor const *)arg1)->getValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_DistanceSensor_1getMaxValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::DistanceSensor *arg1 = (webots::DistanceSensor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::DistanceSensor **)&jarg1; 
  result = (double)((webots::DistanceSensor const *)arg1)->getMaxValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_DistanceSensor_1getMinValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::DistanceSensor *arg1 = (webots::DistanceSensor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::DistanceSensor **)&jarg1; 
  result = (double)((webots::DistanceSensor const *)arg1)->getMinValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_DistanceSensor_1getAperture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::DistanceSensor *arg1 = (webots::DistanceSensor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::DistanceSensor **)&jarg1; 
  result = (double)((webots::DistanceSensor const *)arg1)->getAperture();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_DistanceSensor_1getLookupTableSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::DistanceSensor *arg1 = (webots::DistanceSensor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::DistanceSensor **)&jarg1; 
  result = (int)((webots::DistanceSensor const *)arg1)->getLookupTableSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_DistanceSensor_1getLookupTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::DistanceSensor *arg1 = (webots::DistanceSensor *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::DistanceSensor **)&jarg1; 
  result = (double *)((webots::DistanceSensor const *)arg1)->getLookupTable();
  {
    jresult = SWIG_JavaArrayOutDouble(jenv, (double *) result, arg1->getLookupTableSize()*3);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_DistanceSensor_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::DistanceSensor *arg1 = (webots::DistanceSensor *) 0 ;
  webots::DistanceSensor::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::DistanceSensor **)&jarg1; 
  result = (webots::DistanceSensor::Type)((webots::DistanceSensor const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Emitter(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Emitter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Emitter *)new webots::Emitter((std::string const &)*arg1);
  *(webots::Emitter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Emitter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Emitter *arg1 = (webots::Emitter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Emitter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Emitter_1send(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jint jarg3) {
  jint jresult = 0 ;
  webots::Emitter *arg1 = (webots::Emitter *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Emitter **)&jarg1; 
  {
    if (!jarg2)
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    jbyte *jarr = jenv->GetByteArrayElements(jarg2, 0);
    arg2 = (void *) jarr;
  }
  arg3 = (int)jarg3; 
  result = (int)(arg1)->send((void const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Emitter_1getBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Emitter *arg1 = (webots::Emitter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Emitter **)&jarg1; 
  result = (int)((webots::Emitter const *)arg1)->getBufferSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Emitter_1setChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Emitter *arg1 = (webots::Emitter *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Emitter **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setChannel(arg2);
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Emitter_1getChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Emitter *arg1 = (webots::Emitter *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Emitter **)&jarg1; 
  result = (int)((webots::Emitter const *)arg1)->getChannel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Emitter_1getRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Emitter *arg1 = (webots::Emitter *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Emitter **)&jarg1; 
  result = (double)((webots::Emitter const *)arg1)->getRange();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Emitter_1setRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Emitter *arg1 = (webots::Emitter *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Emitter **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setRange(arg2);
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  result = ((webots::Field const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  webots::Field::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  result = (webots::Field::Type)((webots::Field const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  result = ((webots::Field const *)arg1)->getTypeName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  result = (int)((webots::Field const *)arg1)->getCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1enableSFTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enableSFTracking(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1disableSFTracking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  (arg1)->disableSFTracking();
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getSFBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  result = (bool)((webots::Field const *)arg1)->getSFBool();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getSFInt32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  result = (int)((webots::Field const *)arg1)->getSFInt32();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getSFFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  result = (double)((webots::Field const *)arg1)->getSFFloat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getSFVec2f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  result = (double *)((webots::Field const *)arg1)->getSFVec2f();
  {
    const string test("getSFVec2f");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getSFVec3f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  result = (double *)((webots::Field const *)arg1)->getSFVec3f();
  {
    const string test("getSFVec3f");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getSFRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  result = (double *)((webots::Field const *)arg1)->getSFRotation();
  {
    const string test("getSFRotation");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getSFColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  result = (double *)((webots::Field const *)arg1)->getSFColor();
  {
    const string test("getSFColor");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getSFString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  result = ((webots::Field const *)arg1)->getSFString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getSFNodePrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  webots::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  result = (webots::Node *)((webots::Field const *)arg1)->getSFNode();
  *(webots::Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getMFBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((webots::Field const *)arg1)->getMFBool(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getMFInt32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((webots::Field const *)arg1)->getMFInt32(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getMFFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)((webots::Field const *)arg1)->getMFFloat(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getMFVec2f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdoubleArray jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double *)((webots::Field const *)arg1)->getMFVec2f(arg2);
  {
    const string test("getMFVec2f");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getMFVec3f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdoubleArray jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double *)((webots::Field const *)arg1)->getMFVec3f(arg2);
  {
    const string test("getMFVec3f");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getMFRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdoubleArray jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double *)((webots::Field const *)arg1)->getMFRotation(arg2);
  {
    const string test("getMFRotation");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getMFColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdoubleArray jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double *)((webots::Field const *)arg1)->getMFColor(arg2);
  {
    const string test("getMFColor");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getMFString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((webots::Field const *)arg1)->getMFString(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1getMFNodePrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  webots::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (webots::Node *)((webots::Field const *)arg1)->getMFNode(arg2);
  *(webots::Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1setSFBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSFBool(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1setSFInt32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSFInt32(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1setSFFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSFFloat(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1setSFVec2f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  (arg1)->setSFVec2f((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1setSFVec3f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  (arg1)->setSFVec3f((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1setSFRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  (arg1)->setSFRotation((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1setSFColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  (arg1)->setSFColor((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1setSFString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setSFString((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1setMFBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setMFBool(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1setMFInt32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setMFInt32(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1setMFFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setMFFloat(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1setMFVec2f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  (arg1)->setMFVec2f(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1setMFVec3f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  (arg1)->setMFVec3f(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1setMFRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  (arg1)->setMFRotation(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1setMFColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  (arg1)->setMFColor(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1setMFString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->setMFString(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1insertMFBool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->insertMFBool(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1insertMFInt32(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->insertMFInt32(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1insertMFFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->insertMFFloat(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1insertMFVec2f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  (arg1)->insertMFVec2f(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1insertMFVec3f(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  (arg1)->insertMFVec3f(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1insertMFRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  (arg1)->insertMFRotation(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1insertMFColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  double *arg3 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  (arg1)->insertMFColor(arg2,(double const (*))arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1insertMFString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->insertMFString(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1removeMF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->removeMF(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1removeSF(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  (arg1)->removeSF();
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1importMFNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->importMFNode(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1importMFNodeFromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->importMFNodeFromString(arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1importSFNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->importSFNode((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1importSFNodeFromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->importSFNodeFromString((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Field_1removeMFNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Field *arg1 = (webots::Field *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Field **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->removeMFNode(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1GPS(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::GPS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::GPS *)new webots::GPS((std::string const &)*arg1);
  *(webots::GPS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1GPS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::GPS *arg1 = (webots::GPS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::GPS **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_GPS_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::GPS *arg1 = (webots::GPS *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::GPS **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_GPS_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::GPS *arg1 = (webots::GPS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::GPS **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_GPS_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::GPS *arg1 = (webots::GPS *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::GPS **)&jarg1; 
  result = (int)((webots::GPS const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_GPS_1getValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::GPS *arg1 = (webots::GPS *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::GPS **)&jarg1; 
  result = (double *)((webots::GPS const *)arg1)->getValues();
  {
    const string test("getValues");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_GPS_1getSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::GPS *arg1 = (webots::GPS *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::GPS **)&jarg1; 
  result = (double)((webots::GPS const *)arg1)->getSpeed();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_GPS_1getSpeedVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::GPS *arg1 = (webots::GPS *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::GPS **)&jarg1; 
  result = (double *)((webots::GPS const *)arg1)->getSpeedVector();
  {
    const string test("getSpeedVector");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_GPS_1getCoordinateSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::GPS *arg1 = (webots::GPS *) 0 ;
  webots::GPS::CoordinateSystem result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::GPS **)&jarg1; 
  result = (webots::GPS::CoordinateSystem)((webots::GPS const *)arg1)->getCoordinateSystem();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_GPS_1convertToDegreesMinutesSeconds(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jstring jresult = 0 ;
  double arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = webots::GPS::convertToDegreesMinutesSeconds(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Gyro(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Gyro *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Gyro *)new webots::Gyro((std::string const &)*arg1);
  *(webots::Gyro **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Gyro(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Gyro *arg1 = (webots::Gyro *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Gyro **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Gyro_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Gyro *arg1 = (webots::Gyro *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Gyro **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Gyro_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Gyro *arg1 = (webots::Gyro *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Gyro **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Gyro_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Gyro *arg1 = (webots::Gyro *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Gyro **)&jarg1; 
  result = (int)((webots::Gyro const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Gyro_1getValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Gyro *arg1 = (webots::Gyro *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Gyro **)&jarg1; 
  result = (double *)((webots::Gyro const *)arg1)->getValues();
  {
    const string test("getValues");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Gyro_1getLookupTableSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Gyro *arg1 = (webots::Gyro *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Gyro **)&jarg1; 
  result = (int)((webots::Gyro const *)arg1)->getLookupTableSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Gyro_1getLookupTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Gyro *arg1 = (webots::Gyro *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Gyro **)&jarg1; 
  result = (double *)((webots::Gyro const *)arg1)->getLookupTable();
  {
    jresult = SWIG_JavaArrayOutDouble(jenv, (double *) result, arg1->getLookupTableSize()*3);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1InertialUnit(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::InertialUnit *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::InertialUnit *)new webots::InertialUnit((std::string const &)*arg1);
  *(webots::InertialUnit **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1InertialUnit(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::InertialUnit *arg1 = (webots::InertialUnit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::InertialUnit **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_InertialUnit_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::InertialUnit *arg1 = (webots::InertialUnit *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::InertialUnit **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_InertialUnit_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::InertialUnit *arg1 = (webots::InertialUnit *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::InertialUnit **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_InertialUnit_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::InertialUnit *arg1 = (webots::InertialUnit *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::InertialUnit **)&jarg1; 
  result = (int)((webots::InertialUnit const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_InertialUnit_1getRollPitchYaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::InertialUnit *arg1 = (webots::InertialUnit *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::InertialUnit **)&jarg1; 
  result = (double *)((webots::InertialUnit const *)arg1)->getRollPitchYaw();
  {
    const string test("getRollPitchYaw");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_InertialUnit_1getQuaternion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::InertialUnit *arg1 = (webots::InertialUnit *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::InertialUnit **)&jarg1; 
  result = (double *)((webots::InertialUnit const *)arg1)->getQuaternion();
  {
    const string test("getQuaternion");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_InertialUnit_1getNoise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::InertialUnit *arg1 = (webots::InertialUnit *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::InertialUnit **)&jarg1; 
  result = (double)((webots::InertialUnit const *)arg1)->getNoise();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Joystick(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  webots::Joystick *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (webots::Joystick *)new webots::Joystick();
  *(webots::Joystick **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Joystick(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Joystick *arg1 = (webots::Joystick *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Joystick **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Joystick_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Joystick *arg1 = (webots::Joystick *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Joystick **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Joystick_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Joystick *arg1 = (webots::Joystick *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Joystick **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Joystick_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Joystick *arg1 = (webots::Joystick *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Joystick **)&jarg1; 
  result = (int)((webots::Joystick const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Joystick_1isConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Joystick *arg1 = (webots::Joystick *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Joystick **)&jarg1; 
  result = (bool)((webots::Joystick const *)arg1)->isConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Joystick_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Joystick *arg1 = (webots::Joystick *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Joystick **)&jarg1; 
  result = ((webots::Joystick const *)arg1)->getModel();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Joystick_1getNumberOfAxes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Joystick *arg1 = (webots::Joystick *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Joystick **)&jarg1; 
  result = (int)((webots::Joystick const *)arg1)->getNumberOfAxes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Joystick_1getAxisValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  webots::Joystick *arg1 = (webots::Joystick *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Joystick **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((webots::Joystick const *)arg1)->getAxisValue(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Joystick_1getNumberOfPovs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Joystick *arg1 = (webots::Joystick *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Joystick **)&jarg1; 
  result = (int)((webots::Joystick const *)arg1)->getNumberOfPovs();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Joystick_1getPovValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  webots::Joystick *arg1 = (webots::Joystick *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Joystick **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((webots::Joystick const *)arg1)->getPovValue(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Joystick_1getPressedButton(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Joystick *arg1 = (webots::Joystick *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Joystick **)&jarg1; 
  result = (int)((webots::Joystick const *)arg1)->getPressedButton();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Joystick_1setConstantForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Joystick *arg1 = (webots::Joystick *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Joystick **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setConstantForce(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Joystick_1setConstantForceDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Joystick *arg1 = (webots::Joystick *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Joystick **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setConstantForceDuration(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Joystick_1setAutoCenteringGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Joystick *arg1 = (webots::Joystick *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Joystick **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setAutoCenteringGain(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Joystick_1setResistanceGain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Joystick *arg1 = (webots::Joystick *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Joystick **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setResistanceGain(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Joystick_1setForceAxis(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Joystick *arg1 = (webots::Joystick *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Joystick **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setForceAxis(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Keyboard(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  webots::Keyboard *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (webots::Keyboard *)new webots::Keyboard();
  *(webots::Keyboard **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Keyboard(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Keyboard *arg1 = (webots::Keyboard *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Keyboard **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Keyboard_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Keyboard *arg1 = (webots::Keyboard *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Keyboard **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Keyboard_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Keyboard *arg1 = (webots::Keyboard *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Keyboard **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Keyboard_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Keyboard *arg1 = (webots::Keyboard *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Keyboard **)&jarg1; 
  result = (int)((webots::Keyboard const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Keyboard_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Keyboard *arg1 = (webots::Keyboard *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Keyboard **)&jarg1; 
  result = (int)((webots::Keyboard const *)arg1)->getKey();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1LED(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::LED *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::LED *)new webots::LED((std::string const &)*arg1);
  *(webots::LED **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1LED(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::LED *arg1 = (webots::LED *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::LED **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LED_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::LED *arg1 = (webots::LED *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::LED **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->set(arg2);
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LED_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::LED *arg1 = (webots::LED *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::LED **)&jarg1; 
  result = (int)((webots::LED const *)arg1)->get();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LidarPoint_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  WbLidarPoint *arg1 = (WbLidarPoint *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbLidarPoint **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LidarPoint_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  WbLidarPoint *arg1 = (WbLidarPoint *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbLidarPoint **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LidarPoint_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  WbLidarPoint *arg1 = (WbLidarPoint *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbLidarPoint **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LidarPoint_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  WbLidarPoint *arg1 = (WbLidarPoint *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbLidarPoint **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LidarPoint_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  WbLidarPoint *arg1 = (WbLidarPoint *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbLidarPoint **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LidarPoint_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  WbLidarPoint *arg1 = (WbLidarPoint *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbLidarPoint **)&jarg1; 
  result = (float) ((arg1)->z);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LidarPoint_1layer_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  WbLidarPoint *arg1 = (WbLidarPoint *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbLidarPoint **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->layer_id = arg2;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LidarPoint_1layer_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  WbLidarPoint *arg1 = (WbLidarPoint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbLidarPoint **)&jarg1; 
  result = (int) ((arg1)->layer_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LidarPoint_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  WbLidarPoint *arg1 = (WbLidarPoint *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbLidarPoint **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->time = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LidarPoint_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  WbLidarPoint *arg1 = (WbLidarPoint *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbLidarPoint **)&jarg1; 
  result = (float) ((arg1)->time);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LidarPoint_1getLayerId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  WbLidarPoint *arg1 = (WbLidarPoint *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbLidarPoint **)&jarg1; 
  result = (double)WbLidarPoint_getLayerId(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1LidarPoint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  WbLidarPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (WbLidarPoint *)new WbLidarPoint();
  *(WbLidarPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1LidarPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WbLidarPoint *arg1 = (WbLidarPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WbLidarPoint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Lidar(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Lidar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Lidar *)new webots::Lidar((std::string const &)*arg1);
  *(webots::Lidar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Lidar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Lidar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1enablePointCloud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  (arg1)->enablePointCloud();
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1disablePointCloud(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  (arg1)->disablePointCloud();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  result = (int)((webots::Lidar const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1isPointCloudEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  result = (bool)((webots::Lidar const *)arg1)->isPointCloudEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloatArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getRangeImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  result = (float *)((webots::Lidar const *)arg1)->getRangeImage();
  {
    int size = arg1->getHorizontalResolution();
    const string functionName("getRangeImage");
    if (functionName != "getLayerRangeImage")
    size *= arg1->getNumberOfLayers();
    jresult = SWIG_JavaArrayOutFloat(jenv, result, size);
  }
  return jresult;
}


SWIGEXPORT jfloatArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getLayerRangeImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloatArray jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float *)((webots::Lidar const *)arg1)->getLayerRangeImage(arg2);
  {
    int size = arg1->getHorizontalResolution();
    const string functionName("getLayerRangeImage");
    if (functionName != "getLayerRangeImage")
    size *= arg1->getNumberOfLayers();
    jresult = SWIG_JavaArrayOutFloat(jenv, result, size);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getPointCloudPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  webots::LidarPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  result = (webots::LidarPoint *)((webots::Lidar const *)arg1)->getPointCloud();
  *(webots::LidarPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getLayerPointCloudPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  int arg2 ;
  webots::LidarPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (webots::LidarPoint *)((webots::Lidar const *)arg1)->getLayerPointCloud(arg2);
  *(webots::LidarPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getNumberOfPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  result = (int)((webots::Lidar const *)arg1)->getNumberOfPoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getHorizontalResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  result = (int)((webots::Lidar const *)arg1)->getHorizontalResolution();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getNumberOfLayers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  result = (int)((webots::Lidar const *)arg1)->getNumberOfLayers();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getMinFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  result = (double)((webots::Lidar const *)arg1)->getMinFrequency();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getMaxFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  result = (double)((webots::Lidar const *)arg1)->getMaxFrequency();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  result = (double)((webots::Lidar const *)arg1)->getFrequency();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1setFrequency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setFrequency(arg2);
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getFov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  result = (double)((webots::Lidar const *)arg1)->getFov();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getVerticalFov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  result = (double)((webots::Lidar const *)arg1)->getVerticalFov();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getMinRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  result = (double)((webots::Lidar const *)arg1)->getMinRange();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getMaxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  result = (double)((webots::Lidar const *)arg1)->getMaxRange();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  int arg2 ;
  webots::LidarPoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  arg2 = (int)jarg2; 
  result = webots_Lidar_getPoint((webots::Lidar const *)arg1,arg2);
  *(webots::LidarPoint **)&jresult = new webots::LidarPoint((const webots::LidarPoint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1getLayerPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  webots::Lidar *arg1 = (webots::Lidar *) 0 ;
  int arg2 ;
  int arg3 ;
  webots::LidarPoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Lidar **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = webots_Lidar_getLayerPoint((webots::Lidar const *)arg1,arg2,arg3);
  *(webots::LidarPoint **)&jresult = new webots::LidarPoint((const webots::LidarPoint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1LightSensor(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::LightSensor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::LightSensor *)new webots::LightSensor((std::string const &)*arg1);
  *(webots::LightSensor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1LightSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::LightSensor *arg1 = (webots::LightSensor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::LightSensor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LightSensor_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::LightSensor *arg1 = (webots::LightSensor *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::LightSensor **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LightSensor_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::LightSensor *arg1 = (webots::LightSensor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::LightSensor **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LightSensor_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::LightSensor *arg1 = (webots::LightSensor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::LightSensor **)&jarg1; 
  result = (int)((webots::LightSensor const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LightSensor_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::LightSensor *arg1 = (webots::LightSensor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::LightSensor **)&jarg1; 
  result = (double)((webots::LightSensor const *)arg1)->getValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LightSensor_1getLookupTableSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::LightSensor *arg1 = (webots::LightSensor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::LightSensor **)&jarg1; 
  result = (int)((webots::LightSensor const *)arg1)->getLookupTableSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LightSensor_1getLookupTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::LightSensor *arg1 = (webots::LightSensor *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::LightSensor **)&jarg1; 
  result = (double *)((webots::LightSensor const *)arg1)->getLookupTable();
  {
    jresult = SWIG_JavaArrayOutDouble(jenv, (double *) result, arg1->getLookupTableSize()*3);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Motion(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Motion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Motion *)new webots::Motion((std::string const &)*arg1);
  *(webots::Motion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motion_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Motion *arg1 = (webots::Motion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motion **)&jarg1; 
  result = (bool)((webots::Motion const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Motion(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Motion *arg1 = (webots::Motion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Motion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motion_1play(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Motion *arg1 = (webots::Motion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motion **)&jarg1; 
  (arg1)->play();
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motion_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Motion *arg1 = (webots::Motion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motion **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motion_1getDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Motion *arg1 = (webots::Motion *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motion **)&jarg1; 
  result = (int)((webots::Motion const *)arg1)->getDuration();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motion_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Motion *arg1 = (webots::Motion *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motion **)&jarg1; 
  result = (int)((webots::Motion const *)arg1)->getTime();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motion_1setTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Motion *arg1 = (webots::Motion *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motion **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setTime(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motion_1setReverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  webots::Motion *arg1 = (webots::Motion *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motion **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setReverse(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motion_1setLoop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  webots::Motion *arg1 = (webots::Motion *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motion **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setLoop(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motion_1isOver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Motion *arg1 = (webots::Motion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motion **)&jarg1; 
  result = (bool)((webots::Motion const *)arg1)->isOver();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Motor(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Motor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Motor *)new webots::Motor((std::string const &)*arg1);
  *(webots::Motor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Motor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Motor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setPosition(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1setVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setVelocity(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1setAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setAcceleration(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1setAvailableForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setAvailableForce(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1setAvailableTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setAvailableTorque(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1setControlPID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->setControlPID(arg2,arg3,arg4);
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getTargetPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (double)((webots::Motor const *)arg1)->getTargetPosition();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getMinPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (double)((webots::Motor const *)arg1)->getMinPosition();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getMaxPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (double)((webots::Motor const *)arg1)->getMaxPosition();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (double)((webots::Motor const *)arg1)->getVelocity();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getMaxVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (double)((webots::Motor const *)arg1)->getMaxVelocity();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (double)((webots::Motor const *)arg1)->getAcceleration();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getAvailableForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (double)((webots::Motor const *)arg1)->getAvailableForce();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getMaxForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (double)((webots::Motor const *)arg1)->getMaxForce();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getAvailableTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (double)((webots::Motor const *)arg1)->getAvailableTorque();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getMaxTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (double)((webots::Motor const *)arg1)->getMaxTorque();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getMultiplier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (double)((webots::Motor const *)arg1)->getMultiplier();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1enableForceFeedback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enableForceFeedback(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1disableForceFeedback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  (arg1)->disableForceFeedback();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getForceFeedbackSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (int)((webots::Motor const *)arg1)->getForceFeedbackSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getForceFeedback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (double)((webots::Motor const *)arg1)->getForceFeedback();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1enableTorqueFeedback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enableTorqueFeedback(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1disableTorqueFeedback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  (arg1)->disableTorqueFeedback();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getTorqueFeedbackSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (int)((webots::Motor const *)arg1)->getTorqueFeedbackSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getTorqueFeedback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (double)((webots::Motor const *)arg1)->getTorqueFeedback();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1setForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setForce(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1setTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTorque(arg2);
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  webots::Motor::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (webots::Motor::Type)((webots::Motor const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getBrakePrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  webots::Brake *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (webots::Brake *)(arg1)->getBrake();
  *(webots::Brake **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getPositionSensorPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  webots::PositionSensor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (webots::PositionSensor *)(arg1)->getPositionSensor();
  *(webots::PositionSensor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getBrakeTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (int)((webots::Motor const *)arg1)->getBrakeTag();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1getPositionSensorTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Motor *arg1 = (webots::Motor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Motor **)&jarg1; 
  result = (int)((webots::Motor const *)arg1)->getPositionSensorTag();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_MouseState_1left_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbMouseState **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->left = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_MouseState_1left_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbMouseState **)&jarg1; 
  result = (bool) ((arg1)->left);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_MouseState_1middle_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbMouseState **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->middle = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_MouseState_1middle_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbMouseState **)&jarg1; 
  result = (bool) ((arg1)->middle);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_MouseState_1right_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbMouseState **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->right = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_MouseState_1right_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbMouseState **)&jarg1; 
  result = (bool) ((arg1)->right);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_MouseState_1u_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbMouseState **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->u = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_MouseState_1u_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbMouseState **)&jarg1; 
  result = (double) ((arg1)->u);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_MouseState_1v_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbMouseState **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->v = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_MouseState_1v_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbMouseState **)&jarg1; 
  result = (double) ((arg1)->v);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_MouseState_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbMouseState **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_MouseState_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbMouseState **)&jarg1; 
  result = (double) ((arg1)->x);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_MouseState_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbMouseState **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_MouseState_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbMouseState **)&jarg1; 
  result = (double) ((arg1)->y);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_MouseState_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbMouseState **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_MouseState_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbMouseState **)&jarg1; 
  result = (double) ((arg1)->z);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1MouseState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  WbMouseState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (WbMouseState *)new WbMouseState();
  *(WbMouseState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1MouseState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WbMouseState *arg1 = (WbMouseState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WbMouseState **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Mouse(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  webots::Mouse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (webots::Mouse *)new webots::Mouse();
  *(webots::Mouse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Mouse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Mouse *arg1 = (webots::Mouse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Mouse **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Mouse_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Mouse *arg1 = (webots::Mouse *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Mouse **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Mouse_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Mouse *arg1 = (webots::Mouse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Mouse **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Mouse_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Mouse *arg1 = (webots::Mouse *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Mouse **)&jarg1; 
  result = (int)((webots::Mouse const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Mouse_1enable3dPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Mouse *arg1 = (webots::Mouse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Mouse **)&jarg1; 
  (arg1)->enable3dPosition();
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Mouse_1disable3dPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Mouse *arg1 = (webots::Mouse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Mouse **)&jarg1; 
  (arg1)->disable3dPosition();
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Mouse_1is3dPositionEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Mouse *arg1 = (webots::Mouse *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Mouse **)&jarg1; 
  result = (bool)((webots::Mouse const *)arg1)->is3dPositionEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Mouse_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  webots::Mouse *arg1 = (webots::Mouse *) 0 ;
  webots::MouseState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Mouse **)&jarg1; 
  result = ((webots::Mouse const *)arg1)->getState();
  *(webots::MouseState **)&jresult = new webots::MouseState((const webots::MouseState &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_ContactPoint_1point_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  WbContactPoint *arg1 = (WbContactPoint *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbContactPoint **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  {
    size_t ii;
    double *b = (double *) arg1->point;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((double *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_ContactPoint_1point_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  WbContactPoint *arg1 = (WbContactPoint *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbContactPoint **)&jarg1; 
  result = (double *)(double *) ((arg1)->point);
  jresult = SWIG_JavaArrayOutDouble(jenv, (double *)result, 3); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_ContactPoint_1node_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  WbContactPoint *arg1 = (WbContactPoint *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbContactPoint **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->node_id = arg2;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_ContactPoint_1node_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  WbContactPoint *arg1 = (WbContactPoint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbContactPoint **)&jarg1; 
  result = (int) ((arg1)->node_id);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_ContactPoint_1getNodeId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  WbContactPoint *arg1 = (WbContactPoint *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbContactPoint **)&jarg1; 
  result = (int)WbContactPoint_getNodeId((WbContactPoint const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1ContactPoint(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  WbContactPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (WbContactPoint *)new WbContactPoint();
  *(WbContactPoint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1ContactPoint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WbContactPoint *arg1 = (WbContactPoint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WbContactPoint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1remove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  (arg1)->remove();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = (int)((webots::Node const *)arg1)->getId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  webots::Node::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = (webots::Node::Type)((webots::Node const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getDef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = ((webots::Node const *)arg1)->getDef();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = ((webots::Node const *)arg1)->getTypeName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getBaseTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = ((webots::Node const *)arg1)->getBaseTypeName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getParentNodePrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  webots::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = (webots::Node *)((webots::Node const *)arg1)->getParentNode();
  *(webots::Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1isProto(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = (bool)((webots::Node const *)arg1)->isProto();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getFromProtoDefPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  std::string *arg2 = 0 ;
  webots::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (webots::Node *)((webots::Node const *)arg1)->getFromProtoDef((std::string const &)*arg2);
  *(webots::Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getNumberOfFields(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = (int)((webots::Node const *)arg1)->getNumberOfFields();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getProtoNumberOfFields(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = (int)((webots::Node const *)arg1)->getProtoNumberOfFields();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getFieldPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  std::string *arg2 = 0 ;
  webots::Field *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (webots::Field *)((webots::Node const *)arg1)->getField((std::string const &)*arg2);
  *(webots::Field **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getProtoField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  std::string *arg2 = 0 ;
  webots::Field *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (webots::Field *)((webots::Node const *)arg1)->getProtoField((std::string const &)*arg2);
  *(webots::Field **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getFieldByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  int arg2 ;
  webots::Field *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (webots::Field *)((webots::Node const *)arg1)->getFieldByIndex(arg2);
  *(webots::Field **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getProtoFieldByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  int arg2 ;
  webots::Field *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (webots::Field *)((webots::Node const *)arg1)->getProtoFieldByIndex(arg2);
  *(webots::Field **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = (double *)((webots::Node const *)arg1)->getPosition();
  {
    const string test("getPosition");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = (double *)((webots::Node const *)arg1)->getOrientation();
  {
    const string test("getOrientation");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getPose_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = (double *)((webots::Node const *)arg1)->getPose();
  {
    const string test("getPose");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getPose_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdoubleArray jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  webots::Node *arg2 = (webots::Node *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = *(webots::Node **)&jarg2; 
  result = (double *)((webots::Node const *)arg1)->getPose((webots::Node const *)arg2);
  {
    const string test("getPose");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1enableContactPointsTracking_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = (int)jarg2; 
  ((webots::Node const *)arg1)->enableContactPointsTracking(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1disableContactPointsTracking_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  ((webots::Node const *)arg1)->disableContactPointsTracking();
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1enableContactPointsTracking_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  ((webots::Node const *)arg1)->enableContactPointsTracking(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1disableContactPointsTracking_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  ((webots::Node const *)arg1)->disableContactPointsTracking(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1enablePoseTracking_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = (int)jarg2; 
  ((webots::Node const *)arg1)->enablePoseTracking(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1disablePoseTracking_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  ((webots::Node const *)arg1)->disablePoseTracking();
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1enablePoseTracking_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  int arg2 ;
  webots::Node *arg3 = (webots::Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(webots::Node **)&jarg3; 
  ((webots::Node const *)arg1)->enablePoseTracking(arg2,(webots::Node const *)arg3);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1disablePoseTracking_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  webots::Node *arg2 = (webots::Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = *(webots::Node **)&jarg2; 
  ((webots::Node const *)arg1)->disablePoseTracking((webots::Node const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getContactPointsPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jintArray jarg3) {
  jlong jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  bool arg2 ;
  int *arg3 = (int *) 0 ;
  int temp3 ;
  webots::ContactPoint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return 0;
    }
    if (jenv->GetArrayLength(jarg3) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return 0;
    }
    temp3 = (int)0;
    arg3 = &temp3; 
  }
  result = (webots::ContactPoint *)((webots::Node const *)arg1)->getContactPoints(arg2,arg3);
  *(webots::ContactPoint **)&jresult = result; 
  {
    jint jvalue = (jint)temp3;
    jenv->SetIntArrayRegion(jarg3, 0, 1, &jvalue);
  }
  
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getCenterOfMass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = (double *)((webots::Node const *)arg1)->getCenterOfMass();
  {
    const string test("getCenterOfMass");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getContactPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdoubleArray jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double *)((webots::Node const *)arg1)->getContactPoint(arg2);
  {
    const string test("getContactPoint");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getContactPointNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  int arg2 ;
  webots::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (webots::Node *)((webots::Node const *)arg1)->getContactPointNode(arg2);
  *(webots::Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getNumberOfContactPoints_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  bool arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((webots::Node const *)arg1)->getNumberOfContactPoints(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getNumberOfContactPoints_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = (int)((webots::Node const *)arg1)->getNumberOfContactPoints();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getStaticBalance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = (bool)((webots::Node const *)arg1)->getStaticBalance();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = (double *)((webots::Node const *)arg1)->getVelocity();
  {
    const string test("getVelocity");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1exportString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  result = ((webots::Node const *)arg1)->exportString();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1setVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  double *arg2 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  (arg1)->setVelocity((double const (*))arg2);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1resetPhysics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  (arg1)->resetPhysics();
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1restartController(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  (arg1)->restartController();
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1moveViewpoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  ((webots::Node const *)arg1)->moveViewpoint();
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1setVisibility(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  webots::Node *arg2 = (webots::Node *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = *(webots::Node **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setVisibility(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1addForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jboolean jarg3) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  double *arg2 ;
  bool arg3 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  arg3 = jarg3 ? true : false; 
  (arg1)->addForce((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1addForceWithOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jdoubleArray jarg3, jboolean jarg4) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  double *arg2 ;
  double *arg3 ;
  bool arg4 ;
  jdouble *jarr2 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  arg4 = jarg4 ? true : false; 
  (arg1)->addForceWithOffset((double const (*))arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg2; 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1addTorque(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2, jboolean jarg3) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  double *arg2 ;
  bool arg3 ;
  jdouble *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr2, (double **)&arg2, jarg2)) return ; 
  arg3 = jarg3 ? true : false; 
  (arg1)->addTorque((double const (*))arg2,arg3);
  SWIG_JavaArrayArgoutDouble(jenv, jarr2, (double *)arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1saveState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->saveState((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1loadState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->loadState((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1setJointPosition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jint jarg3) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  double arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setJointPosition(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1setJointPosition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  webots::Node *arg1 = (webots::Node *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setJointPosition(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Node_1getContactPointFromPointer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jlong jresult = 0 ;
  webots::Node *arg1 = (webots::Node *) 0 ;
  long long arg2 ;
  int arg3 ;
  webots::ContactPoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Node **)&jarg1; 
  arg2 = (long long)jarg2; 
  arg3 = (int)jarg3; 
  result = webots_Node_getContactPointFromPointer((webots::Node const *)arg1,arg2,arg3);
  *(webots::ContactPoint **)&jresult = new webots::ContactPoint((const webots::ContactPoint &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Pen(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Pen *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Pen *)new webots::Pen((std::string const &)*arg1);
  *(webots::Pen **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Pen(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Pen *arg1 = (webots::Pen *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Pen **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Pen_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  webots::Pen *arg1 = (webots::Pen *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Pen **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->write(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Pen_1setInkColor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  webots::Pen *arg1 = (webots::Pen *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Pen **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setInkColor(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1PositionSensor(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::PositionSensor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::PositionSensor *)new webots::PositionSensor((std::string const &)*arg1);
  *(webots::PositionSensor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1PositionSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::PositionSensor *arg1 = (webots::PositionSensor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::PositionSensor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_PositionSensor_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::PositionSensor *arg1 = (webots::PositionSensor *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::PositionSensor **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_PositionSensor_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::PositionSensor *arg1 = (webots::PositionSensor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::PositionSensor **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_PositionSensor_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::PositionSensor *arg1 = (webots::PositionSensor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::PositionSensor **)&jarg1; 
  result = (int)((webots::PositionSensor const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_PositionSensor_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::PositionSensor *arg1 = (webots::PositionSensor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::PositionSensor **)&jarg1; 
  result = (double)((webots::PositionSensor const *)arg1)->getValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_PositionSensor_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::PositionSensor *arg1 = (webots::PositionSensor *) 0 ;
  webots::PositionSensor::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::PositionSensor **)&jarg1; 
  result = (webots::PositionSensor::Type)((webots::PositionSensor const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_PositionSensor_1getBrakePrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  webots::PositionSensor *arg1 = (webots::PositionSensor *) 0 ;
  webots::Brake *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::PositionSensor **)&jarg1; 
  result = (webots::Brake *)(arg1)->getBrake();
  *(webots::Brake **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_PositionSensor_1getMotorPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  webots::PositionSensor *arg1 = (webots::PositionSensor *) 0 ;
  webots::Motor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::PositionSensor **)&jarg1; 
  result = (webots::Motor *)(arg1)->getMotor();
  *(webots::Motor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_PositionSensor_1getBrakeTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::PositionSensor *arg1 = (webots::PositionSensor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::PositionSensor **)&jarg1; 
  result = (int)((webots::PositionSensor const *)arg1)->getBrakeTag();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_PositionSensor_1getMotorTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::PositionSensor *arg1 = (webots::PositionSensor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::PositionSensor **)&jarg1; 
  result = (int)((webots::PositionSensor const *)arg1)->getMotorTag();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RadarTarget_1distance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  WbRadarTarget *arg1 = (WbRadarTarget *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbRadarTarget **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RadarTarget_1distance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  WbRadarTarget *arg1 = (WbRadarTarget *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbRadarTarget **)&jarg1; 
  result = (double) ((arg1)->distance);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RadarTarget_1received_1power_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  WbRadarTarget *arg1 = (WbRadarTarget *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbRadarTarget **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->received_power = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RadarTarget_1received_1power_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  WbRadarTarget *arg1 = (WbRadarTarget *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbRadarTarget **)&jarg1; 
  result = (double) ((arg1)->received_power);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RadarTarget_1speed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  WbRadarTarget *arg1 = (WbRadarTarget *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbRadarTarget **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->speed = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RadarTarget_1speed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  WbRadarTarget *arg1 = (WbRadarTarget *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbRadarTarget **)&jarg1; 
  result = (double) ((arg1)->speed);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RadarTarget_1azimuth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  WbRadarTarget *arg1 = (WbRadarTarget *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbRadarTarget **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->azimuth = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RadarTarget_1azimuth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  WbRadarTarget *arg1 = (WbRadarTarget *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbRadarTarget **)&jarg1; 
  result = (double) ((arg1)->azimuth);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RadarTarget_1getReceivedPower(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  WbRadarTarget *arg1 = (WbRadarTarget *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(WbRadarTarget **)&jarg1; 
  result = (double)WbRadarTarget_getReceivedPower(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1RadarTarget(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  WbRadarTarget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (WbRadarTarget *)new WbRadarTarget();
  *(WbRadarTarget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1RadarTarget(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  WbRadarTarget *arg1 = (WbRadarTarget *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(WbRadarTarget **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Radar(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Radar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Radar *)new webots::Radar((std::string const &)*arg1);
  *(webots::Radar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Radar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Radar *arg1 = (webots::Radar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Radar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Radar_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Radar *arg1 = (webots::Radar *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Radar **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Radar_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Radar *arg1 = (webots::Radar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Radar **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Radar_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Radar *arg1 = (webots::Radar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Radar **)&jarg1; 
  result = (int)((webots::Radar const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Radar_1getNumberOfTargets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Radar *arg1 = (webots::Radar *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Radar **)&jarg1; 
  result = (int)((webots::Radar const *)arg1)->getNumberOfTargets();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Radar_1getTargetsPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  webots::Radar *arg1 = (webots::Radar *) 0 ;
  webots::RadarTarget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Radar **)&jarg1; 
  result = (webots::RadarTarget *)((webots::Radar const *)arg1)->getTargets();
  *(webots::RadarTarget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Radar_1getMinRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Radar *arg1 = (webots::Radar *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Radar **)&jarg1; 
  result = (double)((webots::Radar const *)arg1)->getMinRange();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Radar_1getMaxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Radar *arg1 = (webots::Radar *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Radar **)&jarg1; 
  result = (double)((webots::Radar const *)arg1)->getMaxRange();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Radar_1getHorizontalFov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Radar *arg1 = (webots::Radar *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Radar **)&jarg1; 
  result = (double)((webots::Radar const *)arg1)->getHorizontalFov();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Radar_1getVerticalFov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Radar *arg1 = (webots::Radar *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Radar **)&jarg1; 
  result = (double)((webots::Radar const *)arg1)->getVerticalFov();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Radar_1getTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  webots::Radar *arg1 = (webots::Radar *) 0 ;
  int arg2 ;
  webots::RadarTarget result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Radar **)&jarg1; 
  arg2 = (int)jarg2; 
  result = webots_Radar_getTarget((webots::Radar const *)arg1,arg2);
  *(webots::RadarTarget **)&jresult = new webots::RadarTarget((const webots::RadarTarget &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1RangeFinder(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::RangeFinder *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::RangeFinder *)new webots::RangeFinder((std::string const &)*arg1);
  *(webots::RangeFinder **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1RangeFinder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::RangeFinder *arg1 = (webots::RangeFinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::RangeFinder **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RangeFinder_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::RangeFinder *arg1 = (webots::RangeFinder *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::RangeFinder **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RangeFinder_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::RangeFinder *arg1 = (webots::RangeFinder *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::RangeFinder **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RangeFinder_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::RangeFinder *arg1 = (webots::RangeFinder *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::RangeFinder **)&jarg1; 
  result = (int)((webots::RangeFinder const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloatArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RangeFinder_1getRangeImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloatArray jresult = 0 ;
  webots::RangeFinder *arg1 = (webots::RangeFinder *) 0 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::RangeFinder **)&jarg1; 
  result = (float *)((webots::RangeFinder const *)arg1)->getRangeImage();
  {
    jresult = SWIG_JavaArrayOutFloat(jenv, result, arg1->getWidth()*arg1->getHeight());
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RangeFinder_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::RangeFinder *arg1 = (webots::RangeFinder *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::RangeFinder **)&jarg1; 
  result = (int)((webots::RangeFinder const *)arg1)->getWidth();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RangeFinder_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::RangeFinder *arg1 = (webots::RangeFinder *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::RangeFinder **)&jarg1; 
  result = (int)((webots::RangeFinder const *)arg1)->getHeight();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RangeFinder_1getFov(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::RangeFinder *arg1 = (webots::RangeFinder *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::RangeFinder **)&jarg1; 
  result = (double)((webots::RangeFinder const *)arg1)->getFov();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RangeFinder_1getMinRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::RangeFinder *arg1 = (webots::RangeFinder *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::RangeFinder **)&jarg1; 
  result = (double)((webots::RangeFinder const *)arg1)->getMinRange();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RangeFinder_1getMaxRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::RangeFinder *arg1 = (webots::RangeFinder *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::RangeFinder **)&jarg1; 
  result = (double)((webots::RangeFinder const *)arg1)->getMaxRange();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RangeFinder_1saveImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  webots::RangeFinder *arg1 = (webots::RangeFinder *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::RangeFinder **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (int)((webots::RangeFinder const *)arg1)->saveImage((std::string const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RangeFinder_1rangeImageGetDepth(JNIEnv *jenv, jclass jcls, jfloatArray jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jfloat jresult = 0 ;
  float *arg1 = (float *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  jfloat *jarr1 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  if (!SWIG_JavaArrayInFloat(jenv, &jarr1, (float **)&arg1, jarg1)) return 0; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (float)webots::RangeFinder::rangeImageGetDepth((float const *)arg1,arg2,arg3,arg4);
  jresult = (jfloat)result; 
  SWIG_JavaArrayArgoutFloat(jenv, jarr1, (float *)arg1, jarg1); 
  delete [] arg1; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Receiver(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Receiver *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Receiver *)new webots::Receiver((std::string const &)*arg1);
  *(webots::Receiver **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Receiver(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Receiver *arg1 = (webots::Receiver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Receiver **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Receiver_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Receiver *arg1 = (webots::Receiver *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Receiver **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Receiver_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Receiver *arg1 = (webots::Receiver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Receiver **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Receiver_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Receiver *arg1 = (webots::Receiver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Receiver **)&jarg1; 
  result = (int)((webots::Receiver const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Receiver_1setChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Receiver *arg1 = (webots::Receiver *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Receiver **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setChannel(arg2);
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Receiver_1getChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Receiver *arg1 = (webots::Receiver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Receiver **)&jarg1; 
  result = (int)((webots::Receiver const *)arg1)->getChannel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Receiver_1getQueueLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Receiver *arg1 = (webots::Receiver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Receiver **)&jarg1; 
  result = (int)((webots::Receiver const *)arg1)->getQueueLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Receiver_1nextPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Receiver *arg1 = (webots::Receiver *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Receiver **)&jarg1; 
  (arg1)->nextPacket();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Receiver_1getDataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Receiver *arg1 = (webots::Receiver *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Receiver **)&jarg1; 
  result = (int)((webots::Receiver const *)arg1)->getDataSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jbyteArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Receiver_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jbyteArray jresult = 0 ;
  webots::Receiver *arg1 = (webots::Receiver *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Receiver **)&jarg1; 
  result = (void *)((webots::Receiver const *)arg1)->getData();
  {
    jresult = SWIG_JavaArrayOutSchar(jenv, (signed char *) result, arg1->getDataSize());
  }
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Receiver_1getSignalStrength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Receiver *arg1 = (webots::Receiver *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Receiver **)&jarg1; 
  result = (double)((webots::Receiver const *)arg1)->getSignalStrength();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Receiver_1getEmitterDirection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Receiver *arg1 = (webots::Receiver *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Receiver **)&jarg1; 
  result = (double *)((webots::Receiver const *)arg1)->getEmitterDirection();
  {
    const string test("getEmitterDirection");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Skin(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Skin *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Skin *)new webots::Skin((std::string const &)*arg1);
  *(webots::Skin **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Skin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Skin *arg1 = (webots::Skin *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Skin **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Skin_1setBoneOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3, jboolean jarg4) {
  webots::Skin *arg1 = (webots::Skin *) 0 ;
  int arg2 ;
  double *arg3 ;
  bool arg4 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Skin **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setBoneOrientation(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Skin_1setBonePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdoubleArray jarg3, jboolean jarg4) {
  webots::Skin *arg1 = (webots::Skin *) 0 ;
  int arg2 ;
  double *arg3 ;
  bool arg4 ;
  jdouble *jarr3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Skin **)&jarg1; 
  arg2 = (int)jarg2; 
  if (jarg3 && jenv->GetArrayLength(jarg3) != 3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInDouble(jenv, &jarr3, (double **)&arg3, jarg3)) return ; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setBonePosition(arg2,(double const (*))arg3,arg4);
  SWIG_JavaArrayArgoutDouble(jenv, jarr3, (double *)arg3, jarg3); 
  delete [] arg3; 
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Skin_1getBoneCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Skin *arg1 = (webots::Skin *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Skin **)&jarg1; 
  result = (int)((webots::Skin const *)arg1)->getBoneCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Skin_1getBoneName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  webots::Skin *arg1 = (webots::Skin *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Skin **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((webots::Skin const *)arg1)->getBoneName(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Skin_1getBoneOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jdoubleArray jresult = 0 ;
  webots::Skin *arg1 = (webots::Skin *) 0 ;
  int arg2 ;
  bool arg3 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Skin **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (double *)((webots::Skin const *)arg1)->getBoneOrientation(arg2,arg3);
  {
    const string test("getBoneOrientation");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Skin_1getBonePosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jdoubleArray jresult = 0 ;
  webots::Skin *arg1 = (webots::Skin *) 0 ;
  int arg2 ;
  bool arg3 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Skin **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (double *)((webots::Skin const *)arg1)->getBonePosition(arg2,arg3);
  {
    const string test("getBonePosition");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Speaker(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::Speaker *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::Speaker *)new webots::Speaker((std::string const &)*arg1);
  *(webots::Speaker **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Speaker(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Speaker *arg1 = (webots::Speaker *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Speaker **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Speaker_1playSound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jboolean jarg7) {
  webots::Speaker *arg1 = (webots::Speaker *) 0 ;
  webots::Speaker *arg2 = (webots::Speaker *) 0 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  bool arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(webots::Speaker **)&jarg1; 
  arg2 = *(webots::Speaker **)&jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = jarg7 ? true : false; 
  webots::Speaker::playSound(arg1,arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Speaker_1isSoundPlaying(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  webots::Speaker *arg1 = (webots::Speaker *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Speaker **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((webots::Speaker const *)arg1)->isSoundPlaying((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Speaker_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  webots::Speaker *arg1 = (webots::Speaker *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Speaker **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->stop((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Speaker_1setEngine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  webots::Speaker *arg1 = (webots::Speaker *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Speaker **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setEngine((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Speaker_1setLanguage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  webots::Speaker *arg1 = (webots::Speaker *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Speaker **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->setLanguage((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Speaker_1getEngine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Speaker *arg1 = (webots::Speaker *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Speaker **)&jarg1; 
  result = (arg1)->getEngine();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Speaker_1getLanguage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Speaker *arg1 = (webots::Speaker *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Speaker **)&jarg1; 
  result = (arg1)->getLanguage();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Speaker_1speak(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  webots::Speaker *arg1 = (webots::Speaker *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Speaker **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (double)jarg3; 
  (arg1)->speak((std::string const &)*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Speaker_1isSpeaking(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Speaker *arg1 = (webots::Speaker *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Speaker **)&jarg1; 
  result = (bool)((webots::Speaker const *)arg1)->isSpeaking();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1TouchSensor(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  webots::TouchSensor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (webots::TouchSensor *)new webots::TouchSensor((std::string const &)*arg1);
  *(webots::TouchSensor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1TouchSensor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::TouchSensor *arg1 = (webots::TouchSensor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::TouchSensor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_TouchSensor_1enable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::TouchSensor *arg1 = (webots::TouchSensor *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::TouchSensor **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_TouchSensor_1disable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::TouchSensor *arg1 = (webots::TouchSensor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::TouchSensor **)&jarg1; 
  (arg1)->disable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_TouchSensor_1getSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::TouchSensor *arg1 = (webots::TouchSensor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::TouchSensor **)&jarg1; 
  result = (int)((webots::TouchSensor const *)arg1)->getSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_TouchSensor_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::TouchSensor *arg1 = (webots::TouchSensor *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::TouchSensor **)&jarg1; 
  result = (double)((webots::TouchSensor const *)arg1)->getValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_TouchSensor_1getValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::TouchSensor *arg1 = (webots::TouchSensor *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::TouchSensor **)&jarg1; 
  result = (double *)((webots::TouchSensor const *)arg1)->getValues();
  {
    const string test("getValues");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_TouchSensor_1getLookupTableSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::TouchSensor *arg1 = (webots::TouchSensor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::TouchSensor **)&jarg1; 
  result = (int)((webots::TouchSensor const *)arg1)->getLookupTableSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_TouchSensor_1getLookupTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::TouchSensor *arg1 = (webots::TouchSensor *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::TouchSensor **)&jarg1; 
  result = (double *)((webots::TouchSensor const *)arg1)->getLookupTable();
  {
    jresult = SWIG_JavaArrayOutDouble(jenv, (double *) result, arg1->getLookupTableSize()*3);
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_TouchSensor_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::TouchSensor *arg1 = (webots::TouchSensor *) 0 ;
  webots::TouchSensor::Type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::TouchSensor **)&jarg1; 
  result = (webots::TouchSensor::Type)((webots::TouchSensor const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Robot(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  webots::Robot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (webots::Robot *)new webots::Robot();
  *(webots::Robot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1internalGetInstance(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  webots::Robot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (webots::Robot *)webots::Robot::internalGetInstance();
  *(webots::Robot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Robot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Robot **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1step(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->step(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1waitForUserInputEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  webots::Robot::UserInputEvent arg2 ;
  int arg3 ;
  webots::Robot::UserInputEvent result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  arg2 = (webots::Robot::UserInputEvent)jarg2; 
  arg3 = (int)jarg3; 
  result = (webots::Robot::UserInputEvent)(arg1)->waitForUserInputEvent(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = ((webots::Robot const *)arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getUrdf_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  std::string arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((webots::Robot const *)arg1)->getUrdf(arg2);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getUrdf_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = ((webots::Robot const *)arg1)->getUrdf();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = (double)((webots::Robot const *)arg1)->getTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getModel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = ((webots::Robot const *)arg1)->getModel();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getCustomData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = ((webots::Robot const *)arg1)->getCustomData();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1setCustomData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setCustomData((std::string const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  webots::Robot::Mode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = (webots::Robot::Mode)((webots::Robot const *)arg1)->getMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1setMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  webots::Robot::Mode arg2 ;
  char *arg3 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  arg2 = (webots::Robot::Mode)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  (arg1)->setMode(arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getSupervisor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = (bool)((webots::Robot const *)arg1)->getSupervisor();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getSynchronization(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = (bool)((webots::Robot const *)arg1)->getSynchronization();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getProjectPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = ((webots::Robot const *)arg1)->getProjectPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getWorldPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = ((webots::Robot const *)arg1)->getWorldPath();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getBasicTimeStep(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = (double)((webots::Robot const *)arg1)->getBasicTimeStep();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getNumberOfDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = (int)((webots::Robot const *)arg1)->getNumberOfDevices();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getDeviceByIndexPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  int arg2 ;
  webots::Device *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (webots::Device *)(arg1)->getDeviceByIndex(arg2);
  *(webots::Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  std::string *arg2 = 0 ;
  webots::Device *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (webots::Device *)(arg1)->getDevice((std::string const &)*arg2);
  *(webots::Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = (int)((webots::Robot const *)arg1)->getType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1batterySensorEnable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->batterySensorEnable(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1batterySensorDisable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  (arg1)->batterySensorDisable();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1batterySensorGetSamplingPeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = (int)((webots::Robot const *)arg1)->batterySensorGetSamplingPeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1batterySensorGetValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = (double)((webots::Robot const *)arg1)->batterySensorGetValue();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1wwiSendText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->wwiSendText((std::string const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1wwiReceiveText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = (arg1)->wwiReceiveText();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  result = ((webots::Robot const *)arg1)->getData();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1setData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  webots::Robot *arg1 = (webots::Robot *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Robot **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->setData((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getDeviceFromTag(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  webots::Device *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (webots::Device *)webots::Robot::getDeviceFromTag(arg1);
  *(webots::Device **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getDeviceTypeFromTag(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)webots::Robot::getDeviceTypeFromTag(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getDeviceNameFromTag(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = webots::Robot::getDeviceNameFromTag(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getDeviceTagFromIndex(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)webots::Robot::getDeviceTagFromIndex(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Robot_1getDeviceTagFromName(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (int)webots::Robot::getDeviceTagFromName((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_new_1Supervisor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  webots::Supervisor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (webots::Supervisor *)new webots::Supervisor();
  *(webots::Supervisor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_delete_1Supervisor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(webots::Supervisor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1simulationQuit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->simulationQuit(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1simulationReset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  (arg1)->simulationReset();
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1simulationResetPhysics(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  (arg1)->simulationResetPhysics();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1simulationGetMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  webots::Supervisor::SimulationMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  result = (webots::Supervisor::SimulationMode)((webots::Supervisor const *)arg1)->simulationGetMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1simulationSetMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  webots::Supervisor::SimulationMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  arg2 = (webots::Supervisor::SimulationMode)jarg2; 
  (arg1)->simulationSetMode(arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1worldLoad(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->worldLoad((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1worldReload(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  (arg1)->worldReload();
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1worldSave_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  result = (bool)(arg1)->worldSave();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1worldSave_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->worldSave((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1exportImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  ((webots::Supervisor const *)arg1)->exportImage((std::string const &)*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1animationStartRecording(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->animationStartRecording((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1animationStopRecording(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  result = (bool)(arg1)->animationStopRecording();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1movieStartRecording(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jboolean jarg8) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  bool arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->movieStartRecording((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1movieStopRecording(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  (arg1)->movieStopRecording();
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1movieIsReady(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  result = (bool)((webots::Supervisor const *)arg1)->movieIsReady();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1movieFailed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  result = (bool)((webots::Supervisor const *)arg1)->movieFailed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1setLabel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jint jarg7, jdouble jarg8, jstring jarg9) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  int arg7 ;
  double arg8 ;
  std::string *arg9 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (double)jarg8; 
  if(!jarg9) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg9_pstr = (const char *)jenv->GetStringUTFChars(jarg9, 0); 
  if (!arg9_pstr) return ;
  std::string arg9_str(arg9_pstr);
  arg9 = &arg9_str;
  jenv->ReleaseStringUTFChars(jarg9, arg9_pstr); 
  (arg1)->setLabel(arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,(std::string const &)*arg9);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1setLabel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jint jarg7, jdouble jarg8) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  int arg7 ;
  double arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (double)jarg8; 
  (arg1)->setLabel(arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1getRootPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  webots::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  result = (webots::Node *)((webots::Supervisor const *)arg1)->getRoot();
  *(webots::Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1getSelfPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  webots::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  result = (webots::Node *)((webots::Supervisor const *)arg1)->getSelf();
  *(webots::Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1getFromDefPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  std::string *arg2 = 0 ;
  webots::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (webots::Node *)((webots::Supervisor const *)arg1)->getFromDef((std::string const &)*arg2);
  *(webots::Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1getFromIdPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  int arg2 ;
  webots::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (webots::Node *)((webots::Supervisor const *)arg1)->getFromId(arg2);
  *(webots::Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1getFromDevicePrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  webots::Device *arg2 = (webots::Device *) 0 ;
  webots::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  arg2 = *(webots::Device **)&jarg2; 
  result = (webots::Node *)((webots::Supervisor const *)arg1)->getFromDevice((webots::Device const *)arg2);
  *(webots::Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1getFromDeviceTagPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  int arg2 ;
  webots::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (webots::Node *)((webots::Supervisor const *)arg1)->getFromDeviceTag(arg2);
  *(webots::Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1getSelectedPrivate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  webots::Node *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  result = (webots::Node *)((webots::Supervisor const *)arg1)->getSelected();
  *(webots::Node **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1virtualRealityHeadsetIsUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  result = (bool)((webots::Supervisor const *)arg1)->virtualRealityHeadsetIsUsed();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1virtualRealityHeadsetGetPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  result = (double *)((webots::Supervisor const *)arg1)->virtualRealityHeadsetGetPosition();
  {
    const string test("virtualRealityHeadsetGetPosition");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT jdoubleArray JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1virtualRealityHeadsetGetOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdoubleArray jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  result = (double *)((webots::Supervisor const *)arg1)->virtualRealityHeadsetGetOrientation();
  {
    const string test("virtualRealityHeadsetGetOrientation");
    if (test == "getSFVec2f" || test == "getMFVec2f")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 2);
    else if (test == "getSFRotation" || test == "getQuaternion")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 4);
    else if (test == "getVelocity")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 6);
    else if (test == "getOrientation" || test == "virtualRealityHeadsetGetOrientation")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 9);
    else if (test != "getLookupTable")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 3);
    else if (test != "getPose")
    jresult = SWIG_JavaArrayOutDouble(jenv, result, 16);
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1simulationRevert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  (arg1)->simulationRevert();
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1loadWorld(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->loadWorld((std::string const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1saveWorld_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  result = (bool)(arg1)->saveWorld();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1saveWorld_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->saveWorld((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1simulationPhysicsReset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  (arg1)->simulationPhysicsReset();
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1startMovie(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7, jboolean jarg8) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  bool arg8 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->startMovie((std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1stopMovie(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  (arg1)->stopMovie();
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1getMovieStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  result = (int)(arg1)->getMovieStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1movieGetStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  webots::Supervisor *arg1 = (webots::Supervisor *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(webots::Supervisor **)&jarg1; 
  result = (int)((webots::Supervisor const *)arg1)->movieGetStatus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Accelerometer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::Accelerometer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Altimeter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::Altimeter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Brake_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::Brake **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Camera_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::Camera **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Compass_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::Compass **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Connector_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::Connector **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Display_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::Display **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_DistanceSensor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::DistanceSensor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Emitter_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::Emitter **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_GPS_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::GPS **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Gyro_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::Gyro **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_InertialUnit_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::InertialUnit **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LED_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::LED **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Lidar_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::Lidar **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_LightSensor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::LightSensor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Motor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::Motor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Pen_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::Pen **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_PositionSensor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::PositionSensor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Radar_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::Radar **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_RangeFinder_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::RangeFinder **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Receiver_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::Receiver **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Skin_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::Skin **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Speaker_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::Speaker **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_TouchSensor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Device **)&baseptr = *(webots::TouchSensor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_cyberbotics_webots_controller_wrapperJNI_Supervisor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(webots::Robot **)&baseptr = *(webots::Supervisor **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

