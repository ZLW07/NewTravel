cmake_minimum_required(VERSION 3.16)
project(NewTravel)


set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -pthread")

set(Qt_build ON)
if (Qt_build)
    set(CMAKE_PREFIX_PATH  "${CMAKE_CURRENT_SOURCE_DIR}/bin")
    find_package(Qt5Widgets)
    set(QT_VERSION 5)
    set(REQUIRED_LIBS Core Gui Widgets)
    set(REQUIRED_LIBS_QUALIFIED Qt5::Core Qt5::Gui Qt5::Widgets)

endif ()

set(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/Package/lib)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/Package/bin)

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/Package/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/Package/bin)

include_directories(include)
include_directories(ExternalSource/googletest/include)
include_directories(ExternalSource/googletest)
include_directories(ExternalSource)
include_directories(ExternalSource/Webots/include/controller/cpp)
include_directories(ExternalSource/Webots/include/controller/c)
include_directories(ExternalSource/Webots)
link_directories(ExternalSource/Webots/lib/controller)
link_directories(ExternalSource/Webots/lib/webots)

set(BUILD_SHARED_LIBS ON)

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/Cmake)

function(build_library MODULE_NAME)
    message("")
    message("[LIBRARY] [${MODULE_NAME}]------------")
    message(STATUS "Build library ${MODULE_NAME} IN ${${MODULE_NAME}_DIR}")
    if (${ARGC} GREATER_EQUAL 2)
        message(STATUS "Depend on ")
        foreach (arg ${ARGN})
            message("--------------${arg}")
        endforeach (arg)
    endif ()

    include_directories(${${MODULE_NAME}_DIR}/include)
    file(GLOB_RECURSE MODULE_SRC ${${MODULE_NAME}_DIR}/*)
    foreach (file IN LISTS MODULE_SRC)
        message(STATUS "file is = ${file}")
    endforeach (file)
    add_library(${MODULE_NAME} STATIC ${MODULE_SRC})
endfunction()

function(build_execute MODULE_NAME)
    set(CMAKE_AUTOMOC OFF)
    set(CMAKE_AUTORCC OFF)
    set(CMAKE_AUTOUIC OFF)
    message("")
    message("[Execute] [${MODULE_NAME}]------------")
    message(STATUS "Build library ${MODULE_NAME} IN ${${MODULE_NAME}_DIR}")

    if (${ARGC} GREATER_EQUAL 2)
        message(STATUS "Depend on ")
        foreach (arg ${ARGN})
            message("--------------${arg}")
        endforeach (arg)
    endif ()

    include_directories(${${MODULE_NAME}_DIR}/include)
    file(GLOB_RECURSE MODULE_SRC ${${MODULE_NAME}_DIR}/*)
    foreach (file IN LISTS MODULE_SRC)
        message(STATUS "file is = ${file}")
    endforeach (file)
    add_executable(${MODULE_NAME}  ${MODULE_SRC})
    target_link_libraries(${MODULE_NAME} ${ARGN})
endfunction(build_execute)

if (Qt_build)
function(qt_execute MODULE_NAME)
    set(CMAKE_AUTOMOC ON)
    set(CMAKE_AUTORCC ON)
    set(CMAKE_AUTOUIC ON)

    message("")
    message("[Execute] [${MODULE_NAME}]------------")
    message(STATUS "Build library ${MODULE_NAME} IN ${${MODULE_NAME}_DIR}")

    if (${ARGC} GREATER_EQUAL 2)
        message(STATUS "Depend on ")
        foreach (arg ${ARGN})
            message("--------------${arg}")
        endforeach (arg)
    endif ()
    find_package(Qt${QT_VERSION} COMPONENTS ${REQUIRED_LIBS} REQUIRED)
    include_directories(${${MODULE_NAME}_DIR}/include)
    message(STATUS "Depend on  qqqq ")
    file(GLOB_RECURSE MODULE_SRC ${${MODULE_NAME}_DIR}/*)

    foreach (file IN LISTS MODULE_SRC)
        message(STATUS "file is = ${file}")
    endforeach (file)
    add_executable(${MODULE_NAME}  ${MODULE_SRC})
    target_link_libraries(${MODULE_NAME}  ${REQUIRED_LIBS_QUALIFIED} ${ARGN})
#    target_link_libraries(${PROJECT_NAME} ${REQUIRED_LIBS_QUALIFIED})
endfunction(qt_execute)
endif ()

include(LibraryTarget)
include(ExecuteTarget)
if (Qt_build)
    include(Qt_Execute)
endif ()
add_subdirectory(ExternalSource/googletest )

